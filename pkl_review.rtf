  import numpy as np
  import matplotlib.pyplot as plt
  import seaborn as sns
  import pandas as pd
  import os
  from scipy import stats
  import pickle
  from tqdm import tqdm
  import warnings
  from collections import deque
  import random
  warnings.filterwarnings('ignore')
  import pandas as pd


  # Create result directories
  os.makedirs("content/Results", exist_ok=True)
  os.makedirs("content/Results", exist_ok=True)

class MetaAnalysisManager:
    """Manages meta-analysis using Fibonacci sequence master seeds"""

    def __init__(self):
        # Fibonacci sequence (for meta-analysis)
        self.SEEDS = [34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
        self.N_RUNS_PER_SEED = 300
        self.RANDOMSHIFT_SEEDS = [34, 55, 89]
        self.RANDOMSHIFT_N_RUNS_PER_SEED = 300
        self.TOTAL_EXPERIMENTS = len(self.SEEDS) * self.N_RUNS_PER_SEED


        # Logging and tracking
        self.seed_logs = {}
        self.meta_results = {}

    def get_seeds_and_runs(self, env_name):
        """Get environment-specific seeds and runs"""
        return self.SEEDS, self.N_RUNS_PER_SEED

    def generate_experiment_seeds(self, master_seed, env_name=None):
        """Generate experiment seeds from a Fibonacci master seed"""
        np.random.seed(master_seed)
        experiment_seeds = []

        n_runs = self.N_RUNS_PER_SEED  # 300

        # Generate experiment seeds
        for i in range(n_runs):
            seed = np.random.randint(0, 1000000)  # Wide range to avoid collisions
            experiment_seeds.append(seed)

        self.seed_logs[master_seed] = {
            'first_10_seeds': experiment_seeds[:10],
            'total_seeds': len(experiment_seeds),
            'seed_range': [min(experiment_seeds), max(experiment_seeds)]
        }

        return experiment_seeds

    def save_configuration(self, filepath="content/Results/config.txt"):
        """Save complete meta-analysis configuration"""
        os.makedirs(os.path.dirname(filepath), exist_ok=True)

        with open(filepath, 'w') as f:
            f.write("Meta-Analysis Configuration\n")
            f.write("=" * 50 + "\n\n")

            # Regular environments
            f.write("REGULAR ENVIRONMENTS (EnvA, EnvB, EnvC):\n")
            f.write(f"Master Seeds: {self.SEEDS}\n")
            f.write(f"Runs per Master Seed: {self.N_RUNS_PER_SEED}\n")
            f.write(f"Total Experiments: {len(self.SEEDS) * self.N_RUNS_PER_SEED}\n\n")

            # RandomShift environment
            f.write("CROSS-DATASET ENVIRONMENT (RandomShift):\n")
            f.write(f"Master Seeds: {self.RANDOMSHIFT_SEEDS}\n")
            f.write(f"Runs per Master Seed: {self.RANDOMSHIFT_N_RUNS_PER_SEED}\n")
            f.write(f"Total Experiments: {len(self.RANDOMSHIFT_SEEDS) * self.RANDOMSHIFT_N_RUNS_PER_SEED}\n\n")

            f.write("Seed Generation Details:\n")
            f.write("-" * 30 + "\n")
            for master_seed, log in self.seed_logs.items():
                f.write(f"Master Seed {master_seed}:\n")
                f.write(f"  First 10 experiment seeds: {log['first_10_seeds']}\n")
                f.write(f"  Seed range: {log['seed_range']}\n")
                f.write(f"  Total generated: {log['total_seeds']}\n\n")


# Global manager instances
MANAGER = MetaAnalysisManager()

  class EnvironmentA:
      """Environment A with deterministic seed control"""

      def __init__(self, total_trials=200, sigma=0.15, random_state=None):
          self.total_trials = total_trials
          self.trial = 0
          self.n_actions = 5
          self.sigma = sigma
          self.context = None

          # Set up reproducible random state
          if random_state is not None:
              self.rng = np.random.RandomState(random_state)
          else:
              self.rng = np.random.RandomState()

      def reset(self):
          self.trial = 0
          self.update_context()
          return None

      def step(self, action):
          reward = self.get_reward(action)
          self.trial += 1
          self.update_context()
          return reward, self.context

      def get_reward(self, action):
          t = self.trial
          if t < 50:
              means = [0.8, 0.2, 0.2, 0.2, 0.2]
          elif t < 100:
              means = [0.8, 0.2, 0.3, 0.2, 0.2]
          elif t < 150:
              means = [0.2, 0.2, 0.3, 0.2, 0.9]
          else:
              means = [0.2, 0.4, 0.3, 0.2, 0.9]

          # Use controlled random state for noise
          return self.rng.normal(means[action], self.sigma)

      def update_context(self):
          t = self.trial
          norm_t = t / self.total_trials
          if t < 50:
              phase_id = 0
          elif t < 100:
              phase_id = 1
          elif t < 150:
              phase_id = 2
          else:
              phase_id = 3
          self.context = np.array([norm_t, phase_id])

  class EnvironmentB:
      """Environment B with deterministic seed control"""

      def __init__(self, total_trials=200, sigma=0.05, random_state=None):
          self.total_trials = total_trials
          self.trial = 0
          self.n_actions = 5
          self.sigma = sigma
          self.context = None

          if random_state is not None:
              self.rng = np.random.RandomState(random_state)
          else:
              self.rng = np.random.RandomState()


      def reset(self):
          self.trial = 0
          self.update_context()
          return None

      def step(self, action):
          reward = self.get_reward(action)
          self.trial += 1
          self.update_context()
          return reward, self.context

      def get_reward(self, action):
          t = self.trial
          base = [0.2] * 5
          phase = t // 40

          if phase % 2 == 0:
              base[0] = 0.95; base[4] = 0.01
          else:
              base[0] = 0.01; base[4] = 0.95

          for i in [1, 2, 3]:
              base[i] = 0.05

          reward = base[action] + self.rng.normal(0, self.sigma)
          return np.clip(reward, 0, 1)

      def update_context(self):
          t = self.trial
          norm_t = t / self.total_trials
          phase = t // 40
          phase_id = phase % 2
          self.context = np.array([norm_t, phase_id])


  class EnvironmentC:
      """Environment C with controlled randomness while maintaining stochastic nature"""
      def __init__(self, total_trials=200, sigma=0.15,
                  disturbance_prob=0.05, disturbance_strength=0.7,
                  random_state=None):
          self.total_trials = total_trials
          self.n_actions = 5
          self.sigma = sigma
          self.trial = 0
          self.disturbance_prob = disturbance_prob
          self.disturbance_strength = disturbance_strength

          # Set up controlled random state
          if random_state is not None:
              self.rng = np.random.RandomState(random_state)
          else:
              self.rng = np.random.RandomState()

          # Generate random but reproducible configuration
          self._generate_random_configuration()

          self.active_disturbance = False
          self.disturbance_action = None
          self.disturbance_duration = 0
          self.context = None
          self.update_reward_structure()

      def _generate_random_configuration(self):
          """Generate random configuration using controlled randomness"""
          # Generate 3 random change points between 30-180 (but deterministic)
          self.change_points = sorted(self.rng.choice(range(30, 181), size=3, replace=False).tolist())

          # Generate different optimal actions and rewards for each segment
          self.optimal_actions = []
          self.optimal_rewards = []
          used_actions = set()

          for i in range(4):  # 4 segments total
              # Ensure different optimal action for each segment
              if len(used_actions) < self.n_actions:
                  unused_actions = [a for a in range(self.n_actions) if a not in used_actions]
                  if unused_actions:
                      opt_action = self.rng.choice(unused_actions)
                  else:
                      prev_action = self.optimal_actions[-1] if self.optimal_actions else -1
                      opt_action = (prev_action + 1) % self.n_actions
              else:
                  prev_action = self.optimal_actions[-1] if self.optimal_actions else -1
                  available_actions = [a for a in range(self.n_actions) if a != prev_action]
                  opt_action = self.rng.choice(available_actions)

              used_actions.add(opt_action)
              self.optimal_actions.append(opt_action)

              # Generate different optimal reward levels
              opt_reward = self.rng.uniform(0.75, 0.9)
              self.optimal_rewards.append(opt_reward)


      def reset(self):
          self.trial = 0
          self.active_disturbance = False
          self.disturbance_action = None
          self.disturbance_duration = 0
          self.update_reward_structure()
          return None

      def step(self, action):
          reward = self.rng.normal(self.means[action], self.sigma)
          self.trial += 1
          self.update_reward_structure()
          return reward, self.context

      def update_reward_structure(self):
          t = self.trial
          norm_t = t / self.total_trials

          # Determine current segment
          phase = 0
          for i, cp in enumerate(self.change_points):
              if t >= cp:
                  phase = i + 1
              else:
                  break

          optimal_action = self.optimal_actions[phase]
          optimal_reward = self.optimal_rewards[phase]

          # Set basic reward structure
          means = [0.2] * self.n_actions
          means[optimal_action] = optimal_reward

          # Handle disturbances with controlled randomness
          if self.active_disturbance:
              self.disturbance_duration -= 1
              if self.disturbance_duration > 0 and self.disturbance_action != optimal_action:
                  means[self.disturbance_action] = self.disturbance_strength
              else:
                  self.active_disturbance = False
                  self.disturbance_action = None

          elif self.rng.random() < self.disturbance_prob:
              non_optimal_actions = [a for a in range(self.n_actions) if a != optimal_action]
              if non_optimal_actions:
                  self.disturbance_action = self.rng.choice(non_optimal_actions)
                  self.active_disturbance = True
                  self.disturbance_duration = self.rng.randint(1, 3)
                  means[self.disturbance_action] = self.disturbance_strength

          self.means = means
          self.context = np.array([norm_t, phase])



      def get_current_optimal_info(self):
          """Get current segment's optimal action and reward"""
          phase = 0
          for i, cp in enumerate(self.change_points):
              if self.trial >= cp:
                  phase = i + 1
              else:
                  break

          return {
              'phase': phase,
              'optimal_action': self.optimal_actions[phase],
              'optimal_reward': self.optimal_rewards[phase],
              'change_point': self.change_points[phase-1] if phase > 0 else 0
          }

# =====================
# 1. RandomShiftEnvironment
# =====================

class RandomShiftEnvironment:
    def __init__(self, total_trials=600, n_actions=5, random_state=None):
        self.total_trials = total_trials
        self.n_actions = n_actions
        self.trial = 0
        self.sigma = 0.12

        # Master seed for reproducibility
        if random_state is not None:
            self.master_rng = np.random.RandomState(random_state)
        else:
            self.master_rng = np.random.RandomState()

        # Enhanced features for ECIA
        self.reward_history = deque(maxlen=50)  # For pattern analysis
        self.action_sequence = deque(maxlen=10)  # For sequence rewards
        self.extreme_event_counter = 0

        # Pattern storage for reuse (ECIA advantage)
        self.stored_patterns = []  # Store patterns from phase 1

        # Multi-layered temporal patterns
        self.short_term_cycle = 0  # 10-15 trials
        self.medium_term_cycle = 0  # 50-80 trials
        self.long_term_phase = 0   # 150+ trials

        # Generate enhanced segment schedule
        self.segments = self._generate_enhanced_segments()
        self.current_segment_idx = 0
        self.segment_start_trial = 0

        # Current state
        self.current_rewards = [0.2] * self.n_actions
        self.context = None
        self.base_noise_level = 0.12

        # Initialize first segment
        self._initialize_current_segment()

    def _generate_enhanced_segments(self):
        """Generate segments with rich complexity patterns and pattern reuse"""
        segments = []
        current_trial = 0

        # Long-term phases (3 phases of ~200 trials each)
        phase_types = ['learning', 'challenging', 'mastery']
        phase_length = self.total_trials // 3

        for phase_idx, phase_type in enumerate(phase_types):
            phase_start = phase_idx * phase_length
            phase_end = min((phase_idx + 1) * phase_length, self.total_trials)

            # Generate segments within each phase
            phase_trials = phase_start
            while phase_trials < phase_end:
                # Segment length based on phase type
                if phase_type == 'learning':
                    segment_length = self.master_rng.randint(80, 120)
                elif phase_type == 'challenging':
                    segment_length = self.master_rng.randint(60, 100)
                else:  # mastery
                    segment_length = self.master_rng.randint(40, 80)

                segment_end = min(phase_trials + segment_length, phase_end)

                segment = {
                    'start': phase_trials,
                    'end': segment_end,
                    'length': segment_end - phase_trials,
                    'phase_type': phase_type,
                    'phase_idx': phase_idx,
                    'config': self._generate_segment_config(phase_type, phase_idx, segment_end - phase_trials)
                }

                segments.append(segment)
                phase_trials = segment_end

        return segments

    def _generate_segment_config(self, phase_type, phase_idx, segment_length):
        """Generate enhanced segment configuration with pattern reuse"""
        config = {
            'phase_type': phase_type,
            'reward_structure': 'layered',
            'is_reused_pattern': False
        }

        # Pattern reuse logic (only after phase 1)
        if phase_idx > 0 and self.stored_patterns and self.master_rng.random() < 0.25:
            # Reuse pattern from phase 1
            base_pattern = self.master_rng.choice(self.stored_patterns)

            # 60% identical, 40% similar variation
            if self.master_rng.random() < 0.6:
                # Completely identical pattern
                config.update(base_pattern)
                config['is_reused_pattern'] = True
                config['reuse_type'] = 'identical'
            else:
                # Similar pattern with variations
                config.update(self._create_similar_pattern(base_pattern))
                config['is_reused_pattern'] = True
                config['reuse_type'] = 'similar'
        else:
            # Generate new pattern
            config.update(self._generate_new_pattern_config(phase_type, segment_length))

            # Store pattern if it's phase 1 (learning phase)
            if phase_idx == 0:
                pattern_to_store = config.copy()
                self.stored_patterns.append(pattern_to_store)

        return config

    def _generate_new_pattern_config(self, phase_type, segment_length):
        """Generate new pattern configuration"""
        # Generate layered reward structure with uneven gaps
        actions = list(range(self.n_actions))
        self.master_rng.shuffle(actions)

        config = {}

        if phase_type == 'learning':
            # Clear hierarchy with uneven gaps for complex learning
            config.update({
                'excellent_actions': actions[:1],      # 0.80-0.90
                'good_actions': actions[1:2],          # 0.75-0.82 (small gap: 0.065)
                'medium_actions': actions[2:3],        # 0.45-0.55 (large gap: 0.285)
                'poor_actions': actions[3:4],          # 0.15-0.25 (large gap: 0.30)
                'bad_actions': actions[4:],            # 0.05-0.15 (small gap: 0.10)
                'noise_multiplier': 0.8,
                'extreme_event_prob': 0.02,
                'sequence_bonus_prob': 0.1,
                'emotional_shock_point': segment_length // 2,  # ECIA-specific: sudden reversal
                'shock_magnitude': 0.4
            })
        elif phase_type == 'challenging':
            # Moderate hierarchy with context-dependent patterns
            config.update({
                'excellent_actions': actions[:1],      # 0.80-0.85
                'good_actions': actions[1:3],          # 0.75-0.80 (small gap)
                'medium_actions': actions[3:4],        # 0.40-0.50 (large gap)
                'poor_actions': actions[4:],           # 0.20-0.30 (large gap)
                'bad_actions': [],
                'noise_multiplier': 1.0,
                'extreme_event_prob': 0.05,
                'sequence_bonus_prob': 0.15,
                'context_dependent_bonus': 0.15,  # ECIA-specific: context sensitivity
                'memory_window': 20  # Long-term memory dependency
            })
        else:  # mastery
            # Complex patterns requiring sophisticated learning
            config.update({
                'excellent_actions': actions[:2],      # 0.75-0.80
                'good_actions': actions[2:3],          # 0.70-0.75 (small gap)
                'medium_actions': actions[3:],         # 0.35-0.45 (large gap)
                'poor_actions': [],
                'bad_actions': [],
                'noise_multiplier': 1.2,
                'extreme_event_prob': 0.08,
                'sequence_bonus_prob': 0.2,
                'expectation_violation_prob': 0.06,  # ECIA-specific: surprise learning
                'long_term_memory_bonus': 0.1  # Reward for remembering distant past
            })

        return config

    def _create_similar_pattern(self, base_pattern):
        """Create similar but not identical pattern"""
        similar_pattern = base_pattern.copy()

        # Introduce small variations
        variation_type = self.master_rng.choice(['timing', 'magnitude', 'order'])

        if variation_type == 'timing':
            # Change timing of key events by ±20%
            if 'emotional_shock_point' in similar_pattern:
                original_point = similar_pattern['emotional_shock_point']
                variation = int(original_point * 0.2)
                similar_pattern['emotional_shock_point'] = original_point + self.master_rng.randint(-variation, variation+1)

        elif variation_type == 'magnitude':
            # Slightly adjust reward magnitudes
            if 'shock_magnitude' in similar_pattern:
                similar_pattern['shock_magnitude'] *= self.master_rng.uniform(0.8, 1.2)
            if 'context_dependent_bonus' in similar_pattern:
                similar_pattern['context_dependent_bonus'] *= self.master_rng.uniform(0.8, 1.2)

        elif variation_type == 'order':
            # Swap positions of some action groups
            if 'good_actions' in similar_pattern and 'medium_actions' in similar_pattern:
                if len(similar_pattern['good_actions']) == 1 and len(similar_pattern['medium_actions']) == 1:
                    # Swap good and medium
                    temp = similar_pattern['good_actions'][0]
                    similar_pattern['good_actions'][0] = similar_pattern['medium_actions'][0]
                    similar_pattern['medium_actions'][0] = temp

        similar_pattern['reuse_type'] = 'similar'
        return similar_pattern

    def _initialize_current_segment(self):
        """Initialize current segment"""
        if self.current_segment_idx >= len(self.segments):
            return

        segment = self.segments[self.current_segment_idx]
        self.segment_start_trial = segment['start']
        self._update_rewards()

    def _update_rewards(self):
        """Update reward structure with enhanced features"""
        segment = self.segments[self.current_segment_idx]
        config = segment['config']
        trial_in_segment = self.trial - self.segment_start_trial

        # Base reward structure with uneven gaps
        rewards = [0.2] * self.n_actions

        # Apply layered reward structure
        for action in config.get('excellent_actions', []):
            rewards[action] = self.master_rng.uniform(0.80, 0.90)
        for action in config.get('good_actions', []):
            rewards[action] = self.master_rng.uniform(0.75, 0.82)  # Small gap
        for action in config.get('medium_actions', []):
            rewards[action] = self.master_rng.uniform(0.45, 0.55)  # Large gap from good
        for action in config.get('poor_actions', []):
            rewards[action] = self.master_rng.uniform(0.15, 0.25)  # Large gap from medium
        for action in config.get('bad_actions', []):
            rewards[action] = self.master_rng.uniform(0.05, 0.15)  # Small gap from poor

        # ECIA-specific features
        self._apply_ecia_features(rewards, config, trial_in_segment)

        # Apply sequence bonuses/penalties (for all agents)
        self._apply_sequence_effects(rewards, config)

        # Apply temporal variations
        self._apply_temporal_patterns(rewards, trial_in_segment)

        self.current_rewards = rewards

    def _apply_ecia_features(self, rewards, config, trial_in_segment):
        """Apply ECIA-specific learning opportunities"""

        # Emotional shock (sudden reversal)
        if 'emotional_shock_point' in config and trial_in_segment == config['emotional_shock_point']:
            excellent_actions = config.get('excellent_actions', [])
            poor_actions = config.get('poor_actions', [])

            if excellent_actions and poor_actions:
                # Dramatic reversal: best becomes worst, worst becomes best
                excellent_action = excellent_actions[0]
                poor_action = poor_actions[0]

                # Swap their rewards dramatically
                rewards[excellent_action] = 0.1  # Dramatic drop
                rewards[poor_action] = 0.85       # Dramatic rise

        # Context-dependent bonuses
        if 'context_dependent_bonus' in config and len(self.reward_history) >= 5:
            recent_avg = np.mean(list(self.reward_history)[-5:])
            context_bonus = config['context_dependent_bonus']

            # Bonus based on recent performance context
            if recent_avg > 0.6:  # Good performance context
                for action in config.get('excellent_actions', []):
                    rewards[action] += context_bonus
            elif recent_avg < 0.4:  # Poor performance context
                for action in config.get('medium_actions', []):
                    rewards[action] += context_bonus * 0.5

        # Long-term memory bonuses
        if 'long_term_memory_bonus' in config and len(self.reward_history) >= 30:
            distant_avg = np.mean(list(self.reward_history)[-30:-20])
            recent_avg = np.mean(list(self.reward_history)[-10:])

            # Reward for recognizing long-term patterns
            if abs(distant_avg - recent_avg) < 0.1:  # Similar patterns
                memory_bonus = config['long_term_memory_bonus']
                for i in range(self.n_actions):
                    rewards[i] += memory_bonus

        # Expectation violation (surprise learning)
        if 'expectation_violation_prob' in config:
            if self.master_rng.random() < config['expectation_violation_prob']:
                surprise_action = self.master_rng.randint(0, self.n_actions)
                if self.master_rng.random() < 0.7:
                    rewards[surprise_action] = min(0.95, rewards[surprise_action] + 0.3)
                else:
                    rewards[surprise_action] = max(0.05, rewards[surprise_action] - 0.3)

    def _apply_sequence_effects(self, rewards, config):
        """Apply sequence bonuses/penalties (fair for all agents)"""
        if len(self.action_sequence) >= 3:
            last_actions = list(self.action_sequence)[-3:]

            # Diversity bonus
            if len(set(last_actions)) == 3:  # All different
                if self.master_rng.random() < config.get('sequence_bonus_prob', 0.1):
                    for i in range(self.n_actions):
                        rewards[i] += 0.1

            # Habit penalty
            elif len(set(last_actions)) == 1:  # All same
                repeated_action = last_actions[0]
                rewards[repeated_action] *= 0.85  # 15% penalty

    def _apply_temporal_patterns(self, rewards, trial_in_segment):
        """Apply multi-layered temporal patterns"""

        # Short-term cycle (10-15 trials)
        short_cycle_pos = (trial_in_segment % 12) / 12.0
        short_modifier = 0.05 * np.sin(2 * np.pi * short_cycle_pos)

        # Medium-term cycle (50-80 trials)
        medium_cycle_pos = (trial_in_segment % 65) / 65.0
        medium_modifier = 0.03 * np.cos(2 * np.pi * medium_cycle_pos)

        # Apply modifiers
        for i in range(self.n_actions):
            rewards[i] += short_modifier + medium_modifier
            rewards[i] = max(0.05, min(0.95, rewards[i]))  # Clamp

    def _update_context(self):
        """Update context (keeping it fair - same as original)"""
        norm_t = self.trial / self.total_trials
        phase_id = self.current_segment_idx % 4  # Simple phase cycling
        self.context = np.array([norm_t, phase_id])

    def step(self, action):
        """Execute one step with enhanced features"""

        # Check if we need to move to next segment
        current_segment = self.segments[self.current_segment_idx]
        if self.trial >= current_segment['end'] and self.current_segment_idx < len(self.segments) - 1:
            self.current_segment_idx += 1
            self._initialize_current_segment()

        # Update rewards for current trial
        self._update_rewards()

        # Get base reward
        base_reward = self.current_rewards[action]

        # Apply noise (enhanced based on phase)
        segment = self.segments[self.current_segment_idx]
        noise_multiplier = segment['config'].get('noise_multiplier', 1.0)
        noise = self.master_rng.normal(0, self.sigma * noise_multiplier)
        final_reward = np.clip(base_reward + noise, 0, 1)

        # Update tracking
        self.reward_history.append(final_reward)
        self.action_sequence.append(action)

        # Update trial and context
        self.trial += 1
        self._update_context()

        return final_reward, self.context

    def reset(self):
        """Reset environment to initial state"""
        self.trial = 0
        self.current_segment_idx = 0
        self.segment_start_trial = 0
        self.reward_history.clear()
        self.action_sequence.clear()
        self.extreme_event_counter = 0

        self._initialize_current_segment()
        self._update_context()
        return None

    def get_change_points(self):
        """Get actual change points for analysis"""
        return [segment['start'] for segment in self.segments[1:]]

    def get_pattern_reuse_info(self):
        """Get information about pattern reuse for analysis"""
        reuse_info = []
        for segment in self.segments:
            if segment['config'].get('is_reused_pattern', False):
                reuse_info.append({
                    'start': segment['start'],
                    'end': segment['end'],
                    'reuse_type': segment['config'].get('reuse_type', 'unknown')
                })
        return reuse_info

import numpy as np
from collections import deque

class ECIA:

    def __init__(self, n_actions=5, epsilon=0.03, eta=0.55, xi=0.001,
                 memory_threshold=0.015, memory_influence=0.3,
                 window_size=30, min_eta=0.095, memory_size=15,
                 alpha=0.22, memory_similarity_threshold=0.035,
                 top_k=3, emotion_decay=0.96, random_state=None):

        if random_state is not None:
            self.rng = np.random.RandomState(random_state)
        else:
            self.rng = np.random.RandomState()

        # Basic parameters
        self.n_actions = n_actions
        self.epsilon = epsilon
        self.xi = xi
        self.alpha = alpha
        self.emotion_decay = emotion_decay
        self.window_size = window_size
        self.min_eta = min_eta
        self.top_k = top_k

        # Dynamic eta adjustment
        self.base_eta = eta
        self.eta = self.base_eta
        self.eta_adaptation_counter = 0

        # Memory system
        self.base_memory_threshold = memory_threshold
        self.base_memory_influence = memory_influence
        self.memory_size = memory_size
        self.memory_similarity_threshold = memory_similarity_threshold
        self.memory_activation_level = 1.0
        self.memory_quality_threshold = 0.15
        self.memory_usage_history = deque(maxlen=20)
        self.memory_cooldown = 0

        # Environment detection
        self.memory_effectiveness_tracker = deque(maxlen=50)
        self.environment_stability_tracker = deque(maxlen=30)
        self.change_detection_window = deque(maxlen=15)
        self.stable_performance_counter = 0

        # Context clustering
        self.context_clusters = {}
        self.cluster_performance = {}
        self.use_context_clustering = True

        # Basic initialization
        self.q_values = np.zeros(n_actions)
        self.emotion = np.zeros(8)
        self.action_counts = np.zeros(n_actions)
        self.time = 0
        self.prev_reward = 0.5
        self.context = None

        # Emotion system
        self.emotion_names = [
            "fear", "joy", "hope", "sadness",
            "curiosity", "anger", "pride", "shame"
        ]
        self.emotion_weight = np.array([
            -0.15, 0.4, 0.3, -0.2, 0.35, -0.25, 0.25, -0.3
        ])
        self.max_total_emotion_energy = 2.5
        self.emotion_momentum = np.zeros(8)

        # Memory storage
        self.episodic_memory = []

        # Other variables
        self.performance_tracker = deque(maxlen=25)
        self.recent_context_changes = deque(maxlen=10)
        self.action_history = deque(maxlen=20)
        self.reward_history = deque(maxlen=20)
        self.learning_boost = 0.2
        self.successful_emotion_patterns = {}
        self.neurogenesis_cycle = 25
        self.emotion_learning_rates = np.array([
            0.15, 0.25, 0.20, 0.12, 0.30, 0.18, 0.22, 0.28
        ])
        self.emotion_action_history = deque(maxlen=12)
        self.context_change_threshold = 0.1
        self.habit_strength_factor = 0.025

    def assess_environment_stability(self):
        """Comprehensive environment stability assessment"""
        if len(self.recent_context_changes) < 5:
            return 0.5

        # Context change stability
        context_changes = list(self.recent_context_changes)
        avg_change = np.mean(context_changes)
        change_variance = np.var(context_changes)
        context_stability = 1.0 - min(avg_change + change_variance * 0.5, 1.0)

        # Reward stability
        if len(self.reward_history) >= 10:
            recent_rewards = list(self.reward_history)[-10:]
            reward_stability = 1.0 - min(np.std(recent_rewards), 1.0)
        else:
            reward_stability = 0.5

        # Performance trend stability
        if len(self.performance_tracker) >= 8:
            recent_performance = list(self.performance_tracker)[-8:]
            performance_trend = abs(np.polyfit(range(8), recent_performance, 1)[0])
            trend_stability = 1.0 - min(performance_trend * 5, 1.0)
        else:
            trend_stability = 0.5

        # Overall stability
        stability = 0.4 * context_stability + 0.4 * reward_stability + 0.2 * trend_stability
        self.environment_stability_tracker.append(stability)
        return np.mean(self.environment_stability_tracker) if self.environment_stability_tracker else 0.5

    def evaluate_memory_effectiveness(self):
        """Memory system effectiveness evaluation"""
        if len(self.memory_usage_history) < 10:
            return 0.5

        memory_used_rewards = [r for used, r in self.memory_usage_history if used]
        memory_unused_rewards = [r for used, r in self.memory_usage_history if not used]

        if len(memory_used_rewards) > 3 and len(memory_unused_rewards) > 3:
            used_avg = np.mean(memory_used_rewards)
            unused_avg = np.mean(memory_unused_rewards)
            effectiveness = (used_avg - unused_avg + 1.0) / 2.0
        else:
            effectiveness = 0.5

        self.memory_effectiveness_tracker.append(effectiveness)
        return np.mean(self.memory_effectiveness_tracker) if self.memory_effectiveness_tracker else 0.5

    def detect_environment_change(self):
        """Environment change detection"""
        if len(self.reward_history) < 10:
            return False

        recent_rewards = list(self.reward_history)[-10:]
        older_rewards = list(self.reward_history)[-20:-10] if len(self.reward_history) >= 20 else recent_rewards

        recent_mean = np.mean(recent_rewards)
        older_mean = np.mean(older_rewards)
        performance_drop = older_mean - recent_mean > 0.2
        performance_volatility = np.std(recent_rewards) > 0.25

        return performance_drop or performance_volatility

    def calculate_memory_need(self):
        """Memory need score calculation (0~1)"""
        if len(self.reward_history) < 10:
            return 0.5

        # Performance volatility
        recent_rewards = list(self.reward_history)[-10:]
        reward_volatility = np.std(recent_rewards)
        volatility_score = min(reward_volatility * 2, 1.0)

        # Exploration vs exploitation imbalance
        if len(self.action_history) >= 10:
            action_diversity = len(set(list(self.action_history)[-10:])) / self.n_actions
            exploration_score = abs(action_diversity - 0.6) * 2
        else:
            exploration_score = 0.5

        # Q-value variance
        q_variance = np.var(self.q_values) if np.sum(self.q_values) != 0 else 0.5
        uncertainty_score = min(q_variance * 5, 1.0)

        # Emotion intensity
        emotion_intensity = np.linalg.norm(self.emotion) / np.sqrt(8)
        need_score = (0.3 * volatility_score + 0.25 * exploration_score +
                     0.25 * uncertainty_score + 0.2 * emotion_intensity)

        return np.clip(need_score, 0.0, 1.0)

    def analyze_performance_trend(self):
        """Recent performance trend analysis"""
        if len(self.performance_tracker) < 10:
            return 0.0

        recent_performance = list(self.performance_tracker)[-10:]
        x = np.arange(len(recent_performance))

        if len(recent_performance) >= 3:
            trend = np.polyfit(x, recent_performance, 1)[0]
            return trend
        else:
            return 0.0

    def adaptive_memory_control(self):
        """Simple and clean adaptive memory control - pure experience-based without environment classification"""
        effectiveness = self.evaluate_memory_effectiveness()

        # 🎯 Core: Judge only based on memory effectiveness
        if effectiveness > 0.6:
            # Memory is helpful → use more
            self.memory_activation_level = 0.8 + 0.2 * effectiveness
        elif effectiveness > 0.4:
            # Memory is somewhat helpful → moderate use
            self.memory_activation_level = 0.4 + 0.4 * effectiveness
        else:
            # Memory is not very helpful → minimize
            self.memory_activation_level = 0.1 + 0.3 * effectiveness

        self.memory_activation_level = np.clip(self.memory_activation_level, 0.05, 1.0)

        # Dynamic parameter adjustment
        self.current_memory_threshold = self.base_memory_threshold / max(0.1, self.memory_activation_level)
        self.current_memory_influence = self.base_memory_influence * self.memory_activation_level

    def identify_context_cluster(self, context):
        """Context cluster identification"""
        if context is None or len(context) < 2:
            return "default"

        norm_t = context[0] if len(context) > 0 else 0
        phase_id = int(context[1]) if len(context) > 1 else 0
        time_cluster = int(norm_t * 4)

        return f"phase_{phase_id}_time_{time_cluster}"

    def compute_memory_quality_score(self, action, reward, prediction_error):
        """Memory quality score calculation"""
        error_score = min(abs(prediction_error), 0.5) / 0.5
        extreme_reward_score = abs(reward - 0.5) / 0.5
        emotion_intensity = np.linalg.norm(self.emotion) / np.sqrt(8)

        return 0.4 * error_score + 0.4 * extreme_reward_score + 0.2 * emotion_intensity

    def store_adaptive_memory(self, action, reward, prediction_error):
        """Universal adaptive memory storage"""
        if self.memory_activation_level < 0.1 or self.context is None:
            return

        quality_score = self.compute_memory_quality_score(action, reward, prediction_error)

        if quality_score < self.memory_quality_threshold:
            return

        if abs(prediction_error) > self.current_memory_threshold:
            memory = {
                'action': action,
                'reward': reward,
                'context': self.context.copy(),
                'time': self.time,
                'prediction_error': abs(prediction_error),
                'quality_score': quality_score,
                'emotion_state': self.emotion.copy()
            }

            # Universal memory storage
            if self.use_context_clustering and self.memory_activation_level > 0.6:
                cluster_id = self.identify_context_cluster(self.context)
                memory['cluster_id'] = cluster_id

                if cluster_id not in self.context_clusters:
                    self.context_clusters[cluster_id] = []
                    self.cluster_performance[cluster_id] = deque(maxlen=20)

                self.context_clusters[cluster_id].append(memory)
                self.cluster_performance[cluster_id].append(reward)

                if len(self.context_clusters[cluster_id]) > self.memory_size // 6:
                    self.context_clusters[cluster_id].sort(
                        key=lambda x: x['quality_score'], reverse=True
                    )
                    self.context_clusters[cluster_id] = self.context_clusters[cluster_id][:self.memory_size // 6]

            # Store in general memory as well
            self.episodic_memory.append(memory)
            if len(self.episodic_memory) > self.memory_size:
                self.episodic_memory.sort(key=lambda x: (
                    0.6 * x['quality_score'] + 0.4 * (x['time'] / max(1, self.time))
                ), reverse=True)
                self.episodic_memory = self.episodic_memory[:self.memory_size]

    def compute_adaptive_memory_bias(self):
        """Universal adaptive memory bias calculation"""
        if self.context is None or self.memory_activation_level < 0.1:
            self.memory_usage_history.append((False, self.prev_reward))
            return np.zeros(self.n_actions)

        relevant_memories = []

        # Universal memory retrieval strategy
        if self.use_context_clustering and self.memory_activation_level > 0.5 and self.context_clusters:
            cluster_id = self.identify_context_cluster(self.context)
            cluster_memories = self.context_clusters.get(cluster_id, [])

            if cluster_memories:
                relevant_memories.extend(cluster_memories[-3:])

            if len(relevant_memories) < 2:
                for cid, memories in self.context_clusters.items():
                    if len(memories) > 0 and cid in self.cluster_performance:
                        cluster_perf = np.mean(self.cluster_performance[cid])
                        if cluster_perf > 0.6:
                            relevant_memories.extend(memories[-2:])
                            if len(relevant_memories) >= 4:
                                break

        # Similarity-based search from general memory
        if len(relevant_memories) < 3:
            similarity_memories = []
            for memory in self.episodic_memory[-30:]:
                if memory.get('context') is not None:
                    context_sim = self.compute_similarity(self.context, memory['context'])
                    if context_sim > self.memory_similarity_threshold:
                        emotion_sim = self.compute_similarity(self.emotion, memory['emotion_state'])
                        combined_sim = 0.7 * context_sim + 0.3 * emotion_sim
                        similarity_memories.append((combined_sim, memory))

            if similarity_memories:
                similarity_memories.sort(key=lambda x: x[0], reverse=True)
                additional_memories = [mem for _, mem in similarity_memories[:max(1, 4-len(relevant_memories))]]
                relevant_memories.extend(additional_memories)

        # Use high-quality memories if insufficient
        if len(relevant_memories) < 2:
            high_quality_memories = [m for m in self.episodic_memory if m['quality_score'] > 0.7]
            if high_quality_memories:
                relevant_memories.extend(high_quality_memories[-2:])

        if not relevant_memories:
            self.memory_usage_history.append((False, self.prev_reward))
            return np.zeros(self.n_actions)

        # Memory bias calculation
        bias = np.zeros(self.n_actions)
        total_weight = 0

        for memory in relevant_memories[-5:]:
            action = memory['action']
            reward = memory['reward']
            quality = memory['quality_score']
            weight = quality * self.current_memory_influence

            if reward > 0.6:
                bias[action] += reward * weight
            elif reward < 0.4:
                bias[action] -= (0.5 - reward) * weight * 0.5

            total_weight += weight

        if total_weight > 0:
            bias = bias / (1.0 + total_weight * 0.2)

        self.memory_usage_history.append((True, self.prev_reward))
        return bias

    def emotional_processing(self, reward):
        """Improved emotional processing"""
        if self.prev_reward is None:
            self.prev_reward = 0.5

        self.emotion = self.emotion_decay * self.emotion
        self.reward_history.append(reward)
        recent_rewards = list(self.reward_history)

        current_emotion_updates = np.zeros(8)
        intensity_factor = 0.7

        # Fear
        if reward < self.prev_reward - 0.15:
            fear_strength = min(0.6, 0.15 + 0.4 * abs(reward - self.prev_reward))
            current_emotion_updates[0] = fear_strength * intensity_factor

        # Joy
        if reward > 0.7:
            joy_strength = min(0.7, 0.2 + 0.5 * reward)
            current_emotion_updates[1] = joy_strength * intensity_factor

        # Hope
        if len(recent_rewards) >= 4:
            recent_trend = np.polyfit(range(4), recent_rewards[-4:], 1)[0]
            if recent_trend > 0.03:
                hope_strength = min(0.6, 0.15 + 0.6 * recent_trend * 10)
                current_emotion_updates[2] = hope_strength * intensity_factor

        # Sadness
        if len(recent_rewards) >= 6:
            avg_recent = np.mean(recent_rewards[-6:])
            if avg_recent < 0.4:
                sadness_strength = min(0.5, 0.1 + 0.4 * (0.4 - avg_recent) / 0.4)
                current_emotion_updates[3] = sadness_strength * intensity_factor

        # Curiosity
        if len(self.action_history) > 0:
            action_diversity = len(set(self.action_history)) / min(len(self.action_history), self.n_actions)
            recent_performance = np.mean(recent_rewards[-3:]) if len(recent_rewards) >= 3 else 0.5

            if recent_performance < 0.6 or action_diversity < 0.8:
                curiosity_strength = min(0.7, 0.2 + 0.3 * (1 - action_diversity) +
                                       0.2 * max(0, 0.6 - recent_performance))
                current_emotion_updates[4] = curiosity_strength * intensity_factor

        # Anger
        expected_improvement = 0.05 * self.time / 200
        expected_reward = 0.5 + expected_improvement
        if reward < expected_reward - 0.2:
            anger_strength = min(0.5, 0.1 + 0.4 * abs(reward - expected_reward))
            current_emotion_updates[5] = anger_strength * intensity_factor

        # Pride
        if len(recent_rewards) >= 5:
            success_rate = sum(r > 0.7 for r in recent_rewards[-5:]) / 5
            if success_rate > 0.6:
                pride_strength = min(0.6, 0.1 + 0.4 * success_rate)
                current_emotion_updates[6] = pride_strength * intensity_factor

        # Shame
        if len(recent_rewards) >= 4:
            failure_rate = sum(r < 0.3 for r in recent_rewards[-4:]) / 4
            if failure_rate > 0.5:
                shame_strength = min(0.4, 0.1 + 0.3 * failure_rate)
                current_emotion_updates[7] = shame_strength * intensity_factor

        self.resolve_emotion_conflicts(current_emotion_updates)

        for i in range(8):
            self.emotion_momentum[i] = 0.7 * self.emotion_momentum[i] + 0.3 * current_emotion_updates[i]
            emotion_change = 0.5 * current_emotion_updates[i] + 0.5 * self.emotion_momentum[i]
            self.emotion[i] = 0.7 * self.emotion[i] + 0.3 * emotion_change

        self.normalize_emotions()
        self.prev_reward = reward

    def resolve_emotion_conflicts(self, emotion_updates):
        """Emotion conflict resolution"""
        conflicting_pairs = [(0, 1), (2, 3), (6, 7)]

        for idx1, idx2 in conflicting_pairs:
            if emotion_updates[idx1] > 0.5 and emotion_updates[idx2] > 0.5:
                avg_strength = (emotion_updates[idx1] + emotion_updates[idx2]) / 2
                emotion_updates[idx1] = avg_strength * 0.8
                emotion_updates[idx2] = avg_strength * 0.8

    def normalize_emotions(self):
        """Emotion normalization"""
        self.emotion = np.clip(self.emotion, 0.0, 1.0)
        total_emotion_energy = np.sum(self.emotion)

        if total_emotion_energy > self.max_total_emotion_energy:
            self.emotion = self.emotion * (self.max_total_emotion_energy / total_emotion_energy)

    def adaptive_eta_adjustment(self):
        """Dynamic eta adjustment"""
        self.eta_adaptation_counter += 1

        if self.eta_adaptation_counter >= 20 and len(self.performance_tracker) >= 10:
            recent_performance = np.mean(list(self.performance_tracker)[-10:])
            performance_variance = np.var(list(self.performance_tracker)[-10:])

            if recent_performance > 0.75:
                self.eta = self.base_eta * 0.6
            elif recent_performance > 0.6:
                self.eta = self.base_eta * 0.8
            elif recent_performance < 0.4:
                self.eta = self.base_eta * 1.3
            elif performance_variance > 0.05:
                self.eta = self.base_eta * 1.1
            else:
                self.eta = self.base_eta

            self.eta = np.clip(self.eta, self.base_eta * 0.3, self.base_eta * 1.5)
            self.eta_adaptation_counter = 0

    def select_top_emotions(self):
        """Core emotion selection"""
        emotion_indices = np.argsort(self.emotion)[-self.top_k:]
        selective_emotions = np.zeros(8)
        selective_emotions[emotion_indices] = self.emotion[emotion_indices]
        return selective_emotions

    def compute_direct_emotion_influence(self):
        """Direct emotion-action mapping"""
        influences = np.zeros(self.n_actions)
        selective_emotions = self.select_top_emotions()

        # Fear
        if selective_emotions[0] > 0.1:
            fear_level = selective_emotions[0]
            min_q = np.min(self.q_values)
            max_q = np.max(self.q_values)
            q_range = max_q - min_q + 0.001

            for action in range(self.n_actions):
                relative_badness = (max_q - self.q_values[action]) / q_range
                influences[action] -= fear_level * 0.4 * relative_badness

        # Joy
        if selective_emotions[1] > 0.1:
            joy_level = selective_emotions[1]
            min_q = np.min(self.q_values)
            max_q = np.max(self.q_values)
            q_range = max_q - min_q + 0.001

            for action in range(self.n_actions):
                relative_goodness = (self.q_values[action] - min_q) / q_range
                influences[action] += joy_level * 0.4 * relative_goodness

        # Curiosity
        if selective_emotions[4] > 0.1:
            curiosity_level = selective_emotions[4]
            min_count = np.min(self.action_counts)
            max_count = np.max(self.action_counts) + 1

            for action in range(self.n_actions):
                exploration_factor = (max_count - self.action_counts[action]) / max_count
                influences[action] += curiosity_level * 0.4 * exploration_factor

        return influences

    def hippocampal_neurogenesis(self):
        """Hippocampal neurogenesis simulation"""
        if self.time % self.neurogenesis_cycle == 0:
            emotion_intensity = np.linalg.norm(self.emotion)
            base_boost = 0.2

            if emotion_intensity > 0.7:
                self.learning_boost = base_boost * 1.3
            elif self.emotion[4] > 0.6:
                self.learning_boost = base_boost * 1.2
            else:
                self.learning_boost = base_boost
        else:
            self.learning_boost = max(0, self.learning_boost - 0.01)

    def prefrontal_modulation(self):
        """Prefrontal cortex modulation"""
        if len(self.episodic_memory) < 5:
            return 0.5

        recent_rewards = [mem['reward'] for mem in self.episodic_memory[-10:]]
        reward_stability = 1.0 - np.std(recent_rewards) if recent_rewards else 0.5

        context_change = np.mean(self.recent_context_changes) if self.recent_context_changes else 0
        emotion_volatility = np.std(self.emotion) if np.sum(self.emotion) > 0 else 0
        emotion_stability = 1.0 - min(emotion_volatility, 1.0)

        performance_trend = 0.5
        if len(self.performance_tracker) >= 5:
            recent_performance = list(self.performance_tracker)[-5:]
            performance_trend = np.mean(recent_performance)

        stability = (0.35 * reward_stability + 0.25 * emotion_stability -
                    0.15 * context_change + 0.25 * performance_trend)

        return np.clip(stability, 0.1, 0.9)

    def compute_uncertainty_bonus(self):
        """Uncertainty-based exploration bonus"""
        uncertainty = np.zeros(self.n_actions)
        total_experiences = self.time + 1

        for a in range(self.n_actions):
            action_count = self.action_counts[a] + 1
            count_uncertainty = np.sqrt(np.log(total_experiences) / action_count)

            # Collect reward history for this action
            action_rewards = [mem['reward'] for mem in self.episodic_memory if mem['action'] == a]

            # Calculate reward standard deviation
            if len(action_rewards) > 1:
                reward_std = np.std(action_rewards)
            else:
                reward_std = 0.5  # Default value

            # Emotion factor
            emotion_factor = 1.0
            if self.emotion[4] > 0.6:  # Curiosity
                emotion_factor = 1.3
            elif self.emotion[0] > 0.6:  # Fear
                emotion_factor = 0.7

            uncertainty[a] = count_uncertainty * (1 + reward_std) * emotion_factor

        return uncertainty * 0.3

    def build_context(self, norm_t, phase_id):
        """Enhanced context construction"""
        grid_patterns = []

        for scale in [1.0, 3.0, 6.0]:
            for offset in [0.0, 0.33, 0.67]:
                grid_patterns.append(np.sin(2*np.pi * (norm_t * scale + offset)))
                grid_patterns.append(np.cos(2*np.pi * (norm_t * scale + offset)))

        time_cells = [
            np.exp(-(norm_t - 0.25)**2 / 0.15),
            np.exp(-(norm_t - 0.5)**2 / 0.15),
            np.exp(-(norm_t - 0.75)**2 / 0.15)
        ]

        emotion_context = self.emotion * 1.5

        return np.concatenate([grid_patterns, time_cells, [phase_id], emotion_context])

    def update_context(self, norm_t, phase_id):
        """Context update and change tracking"""
        self.prev_context = self.context.copy() if self.context is not None else None
        self.context = self.build_context(norm_t, phase_id)

        if self.prev_context is not None:
            min_len = min(len(self.context), len(self.prev_context))
            context_change = np.linalg.norm(self.context[:min_len] - self.prev_context[:min_len])
            self.recent_context_changes.append(context_change)

    def select_action(self):
        """Integrated action selection"""
        self.hippocampal_neurogenesis()
        self.adaptive_eta_adjustment()
        self.adaptive_memory_control()

        pfc_stability = self.prefrontal_modulation()

        # Emotion-based exploration adjustment
        curiosity_boost = self.emotion[4] * 0.2
        fear_penalty = self.emotion[0] * 0.25
        joy_exploitation = self.emotion[1] * 0.15

        adaptive_epsilon = self.epsilon * (1 - pfc_stability)
        adaptive_epsilon = np.clip(
            adaptive_epsilon + curiosity_boost - fear_penalty - joy_exploitation,
            0.01, 0.2
        )

        # Exploration action
        if self.rng.rand() < adaptive_epsilon:
            if self.emotion[4] > 0.6:
                action_probs = 1.0 / (self.action_counts + 0.1)
                action_probs = action_probs / np.sum(action_probs)
                return self.rng.choice(self.n_actions, p=action_probs)
            elif self.emotion[5] > 0.6:
                if len(self.action_history) > 0:
                    recent_action = self.action_history[-1]
                    available_actions = [a for a in range(self.n_actions) if a != recent_action]
                    if available_actions:
                        return self.rng.choice(available_actions)
            return self.rng.choice(self.n_actions)

        # Exploitation action
        emotion_influences = self.compute_direct_emotion_influence()
        memory_bias = self.compute_adaptive_memory_bias()
        uncertainty_bonus = self.compute_uncertainty_bonus()

        final_values = (self.q_values +
                       self.eta * emotion_influences +
                       memory_bias +
                       uncertainty_bonus +
                       self.xi * self.rng.randn(self.n_actions))

        return np.argmax(final_values)

    def update_dopamine_learning(self, action, reward):
        """Dopamine-based learning"""
        prediction_error = reward - self.q_values[action]
        emotion_intensity = np.linalg.norm(self.emotion)

        base_alpha = self.alpha
        emotional_boost = 1.0 + emotion_intensity * 0.3

        if abs(prediction_error) > 0.3:
            adaptive_alpha = base_alpha * 1.3 * emotional_boost
        elif abs(prediction_error) > 0.15:
            adaptive_alpha = base_alpha * 1.1 * emotional_boost
        else:
            adaptive_alpha = base_alpha * emotional_boost

        adaptive_alpha += self.learning_boost

        if self.emotion[4] > 0.6:
            adaptive_alpha *= 1.2

        if self.emotion[0] > 0.7:
            adaptive_alpha *= 0.85

        self.q_values[action] += adaptive_alpha * prediction_error

        habit_strength = min(0.3, self.habit_strength_factor * self.action_counts[action])
        if reward > 0.65:
            self.q_values[action] += habit_strength * reward

        self.performance_tracker.append(reward)
        return prediction_error

    def update(self, *args, **kwargs):
        """Integrated update"""
        if len(args) == 2:
            action, reward = args
            context = None
        elif len(args) == 3:
            context, action, reward = args
            self.context = context
        else:
            action, reward = args[0], args[1]
            context = None

        self.hippocampal_neurogenesis()
        prediction_error = self.update_dopamine_learning(action, reward)
        self.emotional_processing(reward)
        self.store_adaptive_memory(action, reward, prediction_error)

        self.action_history.append(action)
        self.action_counts[action] += 1
        self.time += 1

    def compute_similarity(self, c1, c2):
        """Context similarity calculation"""
        if not isinstance(c1, np.ndarray) or not isinstance(c2, np.ndarray):
            return 0.0

        min_len = min(len(c1), len(c2))
        if min_len == 0:
            return 0.0

        c1_part, c2_part = c1[:min_len], c2[:min_len]

        if np.linalg.norm(c1_part) == 0 or np.linalg.norm(c2_part) == 0:
            return 0.0

        return np.dot(c1_part, c2_part) / (np.linalg.norm(c1_part) * np.linalg.norm(c2_part))

    def reset(self):
        """Complete reset"""
        self.q_values = np.zeros(self.n_actions)
        self.emotion = np.zeros(8)
        self.emotion_momentum = np.zeros(8)
        self.action_counts = np.zeros(self.n_actions)
        self.time = 0
        self.prev_reward = 0.5
        self.context = None
        self.eta = self.base_eta
        self.learning_boost = 0.2
        self.successful_emotion_patterns = {}

        # Universal memory system reset
        self.memory_effectiveness_tracker.clear()
        self.environment_stability_tracker.clear()
        self.memory_activation_level = 1.0
        self.memory_usage_history.clear()
        self.change_detection_window.clear()
        self.stable_performance_counter = 0
        self.memory_cooldown = 0
        self.context_clusters.clear()
        self.cluster_performance.clear()

        self.performance_tracker.clear()
        self.recent_context_changes.clear()
        self.action_history.clear()
        self.reward_history.clear()
        self.episodic_memory.clear()
        self.emotion_action_history.clear()
        self.eta_adaptation_counter = 0

    def get_memory_status(self):
        """Universal memory system status"""
        return {
            'memory_activation_level': round(self.memory_activation_level, 3),
            'environment_stability': round(self.assess_environment_stability(), 3),
            'memory_effectiveness': round(self.evaluate_memory_effectiveness(), 3),
            'memory_need_score': round(self.calculate_memory_need(), 3),
            'current_memory_threshold': round(getattr(self, 'current_memory_threshold', self.base_memory_threshold), 3),
            'current_memory_influence': round(getattr(self, 'current_memory_influence', self.base_memory_influence), 3),
            'memory_count': len(self.episodic_memory),
            'high_quality_memories': len([m for m in self.episodic_memory if m['quality_score'] > 0.5]),
            'context_clusters': len(self.context_clusters),
            'memory_cooldown': self.memory_cooldown,
            'performance_trend': round(self.analyze_performance_trend(), 3) if len(self.performance_tracker) >= 10 else 0.0
        }

    def get_emotion_summary(self):
        """Current state summary"""
        selected_emotions = self.select_top_emotions()

        summary = {
            'current_eta': round(self.eta, 3),
            'eta_ratio': round(self.eta / self.base_eta, 2),
            'total_emotion_energy': round(np.sum(self.emotion), 3),
            'selected_emotions': {},
            'all_emotions': {},
            'memory_status': self.get_memory_status(),
            'learning_boost': round(self.learning_boost, 3),
            'pfc_stability': round(self.prefrontal_modulation(), 3) if len(self.episodic_memory) >= 5 else 0.5,
            'neurogenesis_cycle': self.time % self.neurogenesis_cycle,
            'successful_patterns': len(self.successful_emotion_patterns)
        }

        for i, name in enumerate(self.emotion_names):
            if selected_emotions[i] > 0.1:
                summary['selected_emotions'][name] = round(float(selected_emotions[i]), 3)

        for i, name in enumerate(self.emotion_names):
            if self.emotion[i] > 0.1:
                summary['all_emotions'][name] = round(float(self.emotion[i]), 3)

        return summary

    def get_detailed_decision_breakdown(self):
        """Detailed decision process analysis"""
        breakdown = {
            'q_values': [round(q, 3) for q in self.q_values],
            'emotion_influences': [round(inf, 3) for inf in self.compute_direct_emotion_influence()],
            'memory_bias': [round(mb, 3) for mb in self.compute_adaptive_memory_bias()],
            'uncertainty_bonus': [round(ub, 3) for ub in self.compute_uncertainty_bonus()],
            'pfc_stability': round(self.prefrontal_modulation(), 3),
            'current_emotions': {name: round(float(self.emotion[i]), 3)
                               for i, name in enumerate(self.emotion_names)
                               if self.emotion[i] > 0.1},
            'memory_status': self.get_memory_status()
        }
        return breakdown

    def get_dominant_emotion(self):
        """Return the strongest emotion and its intensity"""
        max_idx = np.argmax(self.emotion)
        return self.emotion_names[max_idx], self.emotion[max_idx]


# Ablation Study classes (maintaining backward compatibility)
class ECIA_NoEmotion(ECIA):
    """Emotion system removal"""
    def emotional_processing(self, reward):
        if self.prev_reward is None:
            self.prev_reward = 0.5
        self.emotion = np.zeros(8)
        self.prev_reward = reward


class ECIA_NoMemory(ECIA):
    """Memory system removal"""
    def store_adaptive_memory(self, action, reward, prediction_error):
        pass

    def compute_adaptive_memory_bias(self):
        return np.zeros(self.n_actions)


class ECIA_NoDopamine(ECIA):
    """Dopamine adaptive learning removal"""
    def update_dopamine_learning(self, action, reward):
        prediction_error = reward - self.q_values[action]
        self.q_values[action] += 0.1 * prediction_error
        self.performance_tracker.append(reward)
        return prediction_error


class ECIA_SingleCore(ECIA):
    """Single core version (already default is single core)"""
    pass


class ECIA_NoDopamine_NoMemory(ECIA):
    """Dopamine + Memory removal"""
    def update_dopamine_learning(self, action, reward):
        prediction_error = reward - self.q_values[action]
        self.q_values[action] += 0.1 * prediction_error
        self.performance_tracker.append(reward)
        return prediction_error

    def store_adaptive_memory(self, action, reward, prediction_error):
        pass

    def compute_adaptive_memory_bias(self):
        return np.zeros(self.n_actions)


class ECIA_NoDopamine_NoEmotion(ECIA):
    """Dopamine + Emotion removal"""
    def update_dopamine_learning(self, action, reward):
        prediction_error = reward - self.q_values[action]
        self.q_values[action] += 0.1 * prediction_error
        self.performance_tracker.append(reward)
        return prediction_error

    def emotional_processing(self, reward):
        if self.prev_reward is None:
            self.prev_reward = 0.5
        self.emotion = np.zeros(8)
        self.prev_reward = reward


class ECIA_NoMemory_NoEmotion(ECIA):
    """Memory + Emotion removal"""
    def store_adaptive_memory(self, action, reward, prediction_error):
        pass

    def compute_adaptive_memory_bias(self):
        return np.zeros(self.n_actions)

    def emotional_processing(self, reward):
        if self.prev_reward is None:
            self.prev_reward = 0.5
        self.emotion = np.zeros(8)
        self.prev_reward = reward


class ECIA_NoAll_Components(ECIA):
    """All advanced components removal"""
    def update_dopamine_learning(self, action, reward):
        prediction_error = reward - self.q_values[action]
        self.q_values[action] += 0.1 * prediction_error
        self.performance_tracker.append(reward)
        return prediction_error

    def store_adaptive_memory(self, action, reward, prediction_error):
        pass

    def compute_adaptive_memory_bias(self):
        return np.zeros(self.n_actions)

    def emotional_processing(self, reward):
        if self.prev_reward is None:
            self.prev_reward = 0.5
        self.emotion = np.zeros(8)
        self.prev_reward = reward


# Basic agents
class EpsilonGreedyAgent:
    def __init__(self, n_actions=5, epsilon=0.1, random_state=None):
        self.n_actions = n_actions
        self.epsilon = epsilon
        self.q_values = np.zeros(n_actions)
        self.action_counts = np.zeros(n_actions)

        if random_state is not None:
            self.rng = np.random.RandomState(random_state)
        else:
            self.rng = np.random.RandomState()

    def reset(self):
        self.q_values = np.zeros(self.n_actions)
        self.action_counts = np.zeros(self.n_actions)

    def select_action(self):
        if self.rng.rand() < self.epsilon:
            return self.rng.choice(self.n_actions)
        return np.argmax(self.q_values)

    def update(self, action, reward):
        self.action_counts[action] += 1
        alpha = 1 / self.action_counts[action]
        self.q_values[action] += alpha * (reward - self.q_values[action])

class ThompsonSamplingAgent:
    def __init__(self, n_actions=5, random_state=None):
        self.n_actions = n_actions
        self.priors = [(0.0, 1.0) for _ in range(n_actions)]
        self.observations = [[] for _ in range(n_actions)]

        if random_state is not None:
            self.rng = np.random.RandomState(random_state)
        else:
            self.rng = np.random.RandomState()

    def reset(self):
        self.priors = [(0.0, 1.0) for _ in range(self.n_actions)]
        self.observations = [[] for _ in range(self.n_actions)]

    def select_action(self):
        samples = [self.rng.normal(mu, sigma) for mu, sigma in self.priors]
        return np.argmax(samples)

    def update(self, action, reward):
        self.observations[action].append(reward)
        data = self.observations[action]
        if len(data) > 1:
            mu = np.mean(data)
            sigma = np.std(data) if np.std(data) > 0 else 1.0
            self.priors[action] = (mu, sigma)

class UCBAgent:
    """UCB with controlled randomness"""

    def __init__(self, n_actions=5, c=0.5, random_state=None):
        self.n_actions = n_actions
        self.c = c
        self.q_values = np.zeros(n_actions)
        self.action_counts = np.zeros(n_actions)
        self.total_steps = 0

        if random_state is not None:
            self.rng = np.random.RandomState(random_state)
        else:
            self.rng = np.random.RandomState()

    def reset(self):
        self.q_values = np.zeros(self.n_actions)
        self.action_counts = np.zeros(self.n_actions)
        self.total_steps = 0

    def select_action(self):
        self.total_steps += 1
        ucb_values = np.zeros(self.n_actions)

        for a in range(self.n_actions):
            if self.action_counts[a] == 0:
                return a
            bonus = self.c * np.sqrt(np.log(self.total_steps) / self.action_counts[a])
            ucb_values[a] = self.q_values[a] + bonus

        return np.argmax(ucb_values)

    def update(self, action, reward):
        self.action_counts[action] += 1
        alpha = 1 / self.action_counts[action]
        self.q_values[action] += alpha * (reward - self.q_values[action])


def test_unified_ecia():
    """Universal integrated ECIA test"""
    agent = ECIA(n_actions=5, memory_size=15)


    # Various environment pattern simulation
    print("\n Various environment pattern test:")

    # Pattern 1: Stable environment
    print(" Stable environment simulation...")
    for i in range(20):
        agent.update_context(i/50, 0)
        action = agent.select_action()
        reward = 0.7 + np.random.normal(0, 0.1)
        agent.update(action, reward)

    stable_status = agent.get_memory_status()
    print(f" Memory activation: {stable_status['memory_activation_level']}")
    print(f" Environment stability: {stable_status['environment_stability']}")
    print(f" Memory need score: {stable_status['memory_need_score']}")

    # Pattern 2: Changing environment
    print("\n Changing environment simulation...")
    for i in range(20):
        agent.update_context((20+i)/50, (i//10))
        action = agent.select_action()
        reward = 0.3 if i < 10 else 0.8 + np.random.normal(0, 0.2)
        agent.update(action, reward)

    changing_status = agent.get_memory_status()
    print(f" Memory activation: {changing_status['memory_activation_level']}")
    print(f" Environment stability: {changing_status['environment_stability']}")
    print(f" Memory need score: {changing_status['memory_need_score']}")
    print(f" Performance trend: {changing_status['performance_trend']}")


    agent.reset()

def bonferroni_correction(p_values, alpha=0.05):
    """Simple Bonferroni correction implementation without statsmodels"""
    p_values = np.array(p_values)
    n_tests = len(p_values)

    # Bonferroni correction
    p_corrected = p_values * n_tests
    p_corrected = np.clip(p_corrected, 0, 1)

    rejected = p_corrected < alpha

    return rejected, p_corrected

def perform_multiple_comparison_correction(complete_meta_results, save_path="content/Results/meta_analysis"):
    """Perform Bonferroni correction for multiple comparisons in analysis"""

    from scipy.stats import ttest_ind, mannwhitneyu
    import pandas as pd

    print("\n MULTIPLE COMPARISON CORRECTION (Bonferroni)")
    print("=" * 70)

    correction_results = {}

    for env_name, env_results in complete_meta_results.items():
        print(f"\n Environment: {env_name}")

        # Extract seed-level data for all agents
        agent_data = {}
        agent_names = []

        for agent_name, agent_result in env_results.items():
            if agent_result['meta_statistics']['n_master_seeds'] > 0:
                seed_means = []
                for seed_key, seed_result in agent_result['individual_seeds'].items():
                    if seed_result['success_rate'] > 0:
                        seed_means.append(seed_result['mean_reward'])

                if len(seed_means) >= 3:  # Minimum data requirement
                    agent_data[agent_name] = seed_means
                    agent_names.append(agent_name)

        if len(agent_names) < 2:
            print(f"   Insufficient data for comparisons in {env_name}")
            continue

        # Perform all pairwise comparisons
        comparison_results = []
        p_values = []
        comparison_names = []

        for i in range(len(agent_names)):
            for j in range(i+1, len(agent_names)):
                agent1, agent2 = agent_names[i], agent_names[j]
                data1, data2 = agent_data[agent1], agent_data[agent2]

                # Perform appropriate statistical test
                try:
                    # Use t-test (could be enhanced with normality checking)
                    stat, p_val = ttest_ind(data1, data2, equal_var=False)

                    # Effect size (Cohen's d)
                    pooled_std = np.sqrt(((len(data1) - 1) * np.var(data1) +
                                         (len(data2) - 1) * np.var(data2)) /
                                        (len(data1) + len(data2) - 2))
                    cohens_d = (np.mean(data1) - np.mean(data2)) / pooled_std if pooled_std > 0 else 0

                    comparison_results.append({
                        'Agent_1': agent1,
                        'Agent_2': agent2,
                        'Mean_1': np.mean(data1),
                        'Mean_2': np.mean(data2),
                        'Mean_Diff': np.mean(data1) - np.mean(data2),
                        'P_Value_Raw': p_val,
                        'Cohens_D': cohens_d,
                        'Test_Statistic': stat
                    })

                    p_values.append(p_val)
                    comparison_names.append(f"{agent1}_vs_{agent2}")

                except Exception as e:
                    print(f"     Test failed for {agent1} vs {agent2}: {e}")

        if p_values:
            # Apply Bonferroni correction
            rejected, p_corrected = bonferroni_correction(p_values, alpha=0.05)


            # Add corrected results
            for i, result in enumerate(comparison_results):
                result['P_Value_Bonferroni'] = p_corrected[i]
                result['Significant_Bonferroni'] = rejected[i]
                result['Significant_Raw'] = result['P_Value_Raw'] < 0.05

            correction_results[env_name] = comparison_results

            # Print significant results after correction
            significant_after_correction = [r for r in comparison_results if r['Significant_Bonferroni']]

            print(f"   Total comparisons: {len(comparison_results)}")
            print(f"   Significant before correction: {sum(r['Significant_Raw'] for r in comparison_results)}")
            print(f"   Significant after Bonferroni: {len(significant_after_correction)}")

            if significant_after_correction:
                print(f"   Significant comparisons after Bonferroni correction:")
                for result in significant_after_correction:
                    direction = ">" if result['Mean_Diff'] > 0 else "<"
                    print(f"    {result['Agent_1']} {direction} {result['Agent_2']}: "
                          f"p_corrected={result['P_Value_Bonferroni']:.6f}, d={result['Cohens_D']:.3f}")
            else:
                print(f"   No significant differences after Bonferroni correction")

        # Save detailed results to CSV
        if comparison_results:
            df = pd.DataFrame(comparison_results)
            csv_filename = f"{save_path}/bonferroni_correction_{env_name}.csv"
            df.to_csv(csv_filename, index=False)
            print(f"   Detailed results saved: {csv_filename}")

    # Save overall correction results
    with open(f"{save_path}/bonferroni_correction_results.pkl", "wb") as f:
        pickle.dump(correction_results, f)

    print(f"\n Multiple comparison correction completed!")
    return correction_results

def perform_multiple_comparison_correction_cross_dataset(complete_results, save_path="content/Results/cross_dataset_study"):
    """Perform Bonferroni correction for cross-dataset study (ECIA_Full vs Baseline only)"""

    from scipy.stats import ttest_ind
    import pandas as pd

    print("\n MULTIPLE COMPARISON CORRECTION (Bonferroni) - Cross-Dataset Study")
    print("=" * 70)

    # Focus on ECIA_Full vs Baseline only
    baseline_agents = ["EpsilonGreedy", "UCB", "TS"]
    target_agents = ["ECIA_Full"] + baseline_agents

    # Metrics to test
    metrics_to_test = [
        'overall_performance_mean',
        'recovery_rate_mean',
        'recovery_time_mean'
    ]

    correction_results = {}

    for metric_name in metrics_to_test:
        print(f"\n Metric: {metric_name}")

        # Extract data for this metric
        agent_data = {}

        for agent_name in target_agents:
            if agent_name in complete_results:
                agent_result = complete_results[agent_name]

                metric_values = []
                for seed_key, seed_result in agent_result['individual_seeds'].items():
                    if seed_result['n_experiments'] > 0:
                        if metric_name == 'overall_performance_mean':
                            metric_values.extend(seed_result['overall_performances'])
                        elif metric_name == 'recovery_rate_mean':
                            metric_values.extend(seed_result['recovery_rates'])
                        elif metric_name == 'recovery_time_mean':
                            metric_values.extend(seed_result['recovery_times'])
                if len(metric_values) >= 3:
                    agent_data[agent_name] = metric_values

        if len(agent_data) < 2:
            print(f"   Insufficient data for {metric_name}")
            continue

        # Perform pairwise comparisons
        comparison_results = []
        p_values = []

        agent_names = list(agent_data.keys())
        for i in range(len(agent_names)):
            for j in range(i+1, len(agent_names)):
                agent1, agent2 = agent_names[i], agent_names[j]
                data1, data2 = agent_data[agent1], agent_data[agent2]

                try:
                    stat, p_val = ttest_ind(data1, data2, equal_var=False)

                    # Effect size
                    pooled_std = np.sqrt(((len(data1) - 1) * np.var(data1) +
                                         (len(data2) - 1) * np.var(data2)) /
                                        (len(data1) + len(data2) - 2))
                    cohens_d = (np.mean(data1) - np.mean(data2)) / pooled_std if pooled_std > 0 else 0

                    comparison_results.append({
                        'Metric': metric_name,
                        'Agent_1': agent1,
                        'Agent_2': agent2,
                        'Mean_1': np.mean(data1),
                        'Mean_2': np.mean(data2),
                        'Mean_Diff': np.mean(data1) - np.mean(data2),
                        'P_Value_Raw': p_val,
                        'Cohens_D': cohens_d
                    })

                    p_values.append(p_val)

                except Exception as e:
                    print(f"     Test failed for {agent1} vs {agent2}: {e}")

        if p_values:
            # Apply Bonferroni correction
            rejected, p_corrected = bonferroni_correction(p_values, alpha=0.05)

            # Add corrected results
            for i, result in enumerate(comparison_results):
                result['P_Value_Bonferroni'] = p_corrected[i]
                result['Significant_Bonferroni'] = rejected[i]
                result['Significant_Raw'] = result['P_Value_Raw'] < 0.05

            correction_results[metric_name] = comparison_results

            # Print results
            significant_after = sum(r['Significant_Bonferroni'] for r in comparison_results)
            significant_before = sum(r['Significant_Raw'] for r in comparison_results)

            print(f"   Significant before/after correction: {significant_before}/{significant_after}")

            if significant_after > 0:
                print(f"   Significant after Bonferroni:")
                for result in comparison_results:
                    if result['Significant_Bonferroni']:
                        direction = ">" if result['Mean_Diff'] > 0 else "<"
                        print(f"    {result['Agent_1']} {direction} {result['Agent_2']}: "
                              f"p_corrected={result['P_Value_Bonferroni']:.6f}")

    # Save results
    if correction_results:
        all_results = []
        for metric_name, metric_results in correction_results.items():
            all_results.extend(metric_results)

        df = pd.DataFrame(all_results)
        csv_filename = f"{save_path}/cross_dataset_bonferroni_correction.csv"
        df.to_csv(csv_filename, index=False)
        print(f"\n Detailed results saved: {csv_filename}")

        with open(f"{save_path}/cross_dataset_bonferroni_correction_results.pkl", "wb") as f:
            pickle.dump(correction_results, f)

    print(f"\n Cross-dataset multiple comparison correction completed!")
    return correction_results


if __name__ == "__main__":
    test_unified_ecia()



import numpy as np
import pandas as pd
import os
from scipy import stats
from collections import defaultdict
import warnings
warnings.filterwarnings('ignore')

class AdvancedStatisticalAnalyzer:
    """Advanced statistical analysis with comprehensive testing pipeline"""
    
    def __init__(self, results_pkl_path, cross_dataset_pkl_path=None, emotion_data_path=None):
        """
        Initialize analyzer with pkl file paths
        
        Args:
            results_pkl_path: Path to complete_results_full.pkl (EnvA-C results)
            cross_dataset_pkl_path: Path to cross_dataset results (optional)
            emotion_data_path: Path to directory containing emotion .npy files (optional)
        """
        self.results_pkl_path = results_pkl_path
        self.cross_dataset_pkl_path = cross_dataset_pkl_path
        self.emotion_data_path = emotion_data_path
        
        # Load data
        self.load_data()
        
        # Environment and agent configurations
        self.environments = ["EnvA", "EnvB", "EnvC"]
        self.baseline_agents = ["EpsilonGreedy", "UCB", "TS"]
        
    def load_data(self):
        """Load pkl data files with error handling"""
        print(" Loading pkl data files...")
        
        # Load EnvA-C results
        try:
            import pickle 
            with open(self.results_pkl_path, "rb") as f:
                self.complete_results = pickle.load(f)
            print(f" Loaded EnvA-C results: {self.results_pkl_path}")
        except Exception as e:
            print(f" Failed to load EnvA-C results: {e}")
            print(" Trying alternative loading method...")
            try:
                # Alternative loading with custom unpickler
                import pickle
                class SafeUnpickler(pkl.Unpickler):
                    def find_class(self, module, name):
                        # Handle missing classes gracefully
                        if name in ['EnvironmentA', 'EnvironmentB', 'EnvironmentC', 'RandomShiftEnvironment',
                                   'ECIA', 'EpsilonGreedyAgent', 'UCBAgent', 'ThompsonSamplingAgent',
                                   'ECIA_NoEmotion', 'ECIA_NoMemory', 'ECIA_NoDopamine',
                                   'ECIA_NoDopamine_NoMemory', 'ECIA_NoDopamine_NoEmotion',
                                   'ECIA_NoMemory_NoEmotion', 'ECIA_NoAll_Components']:
                            return type(name, (), {})  # Return empty class
                        return super().find_class(module, name)
                
                with open(self.results_pkl_path, "rb") as f:
                    self.complete_results = SafeUnpickler(f).load()
                print(f" Loaded EnvA-C results with safe unpickler")
            except Exception as e2:
                print(f" Alternative loading also failed: {e2}")
                self.complete_results = {}
            
        # Load cross-dataset results if provided
        if self.cross_dataset_pkl_path:
            try:
                with open(self.cross_dataset_pkl_path, "rb") as f:
                    self.cross_dataset_results = pickle.load(f)
                print(f" Loaded cross-dataset results: {self.cross_dataset_pkl_path}")
            except Exception as e:
                print(f" Failed to load cross-dataset results: {e}")
                print(" Trying alternative loading method...")
                try:
                    class SafeUnpickler(pickle.Unpickler):
                        def find_class(self, module, name):
                            if name in ['EnvironmentA', 'EnvironmentB', 'EnvironmentC', 'RandomShiftEnvironment',
                                       'ECIA', 'EpsilonGreedyAgent', 'UCBAgent', 'ThompsonSamplingAgent']:
                                return type(name, (), {})
                            return super().find_class(module, name)
                    
                    with open(self.cross_dataset_pkl_path, "rb") as f:
                        self.cross_dataset_results = SafeUnpickler(f).load()
                    print(f" Loaded cross-dataset results with safe unpickler")
                except Exception as e2:
                    print(f" Cross-dataset alternative loading also failed: {e2}")
                    self.cross_dataset_results = {}
        else:
            self.cross_dataset_results = {}

    def extract_seed_level_data(self, agent_result, metric_type='overall_performance'):
        """
        Extract seed-level data for statistical testing
        
        Args:
            agent_result: Agent result dictionary from pkl
            metric_type: Type of metric ('overall_performance', 'recovery_rate', 'recovery_time')
        
        Returns:
            List of seed-level means
        """
        seed_means = []
        
        for seed_key, seed_result in agent_result['individual_seeds'].items():
            if seed_result.get('success_rate', 0) > 0:
                if metric_type == 'overall_performance':
                    # For EnvA-C: use mean_reward from seed result
                    seed_means.append(seed_result.get('mean_reward', 0))
                elif metric_type == 'recovery_rate':
                    # Calculate recovery rate for this seed
                    meta_stats = agent_result.get('meta_statistics', {})
                    seed_recovery = meta_stats.get('meta_recovery_rate_mean', 0)
                    seed_means.append(seed_recovery)
                elif metric_type == 'recovery_time':
                    # Calculate recovery time for this seed
                    meta_stats = agent_result.get('meta_statistics', {})
                    seed_recovery_time = meta_stats.get('meta_recovery_time_mean', 0)
                    seed_means.append(seed_recovery_time)
                    
        return seed_means

    def extract_cross_dataset_seed_data(self, agent_result, metric_type='overall_performance'):
        """Extract seed-level data for cross-dataset results"""
        seed_means = []
        
        for seed_key, seed_result in agent_result['individual_seeds'].items():
            if seed_result.get('n_experiments', 0) > 0:
                if metric_type == 'overall_performance':
                    # Average of all experiments in this seed
                    seed_means.append(seed_result.get('mean_overall_performance', 0))
                elif metric_type == 'recovery_rate':
                    seed_means.append(seed_result.get('mean_recovery_rate', 0))
                elif metric_type == 'recovery_time':
                    seed_means.append(seed_result.get('mean_recovery_time', 0))
                    
        return seed_means

    def perform_normality_test(self, data):
        """Perform Shapiro-Wilk normality test"""
        if len(data) < 3:
            return False, 1.0
        
        try:
            statistic, p_value = stats.shapiro(data)
            return p_value > 0.05, p_value
        except:
            return False, 0.0

    def perform_equal_variance_test(self, data1, data2):
        """Perform Levene's test for equal variances"""
        if len(data1) < 3 or len(data2) < 3:
            return "unknown", 1.0
            
        try:
            statistic, p_value = stats.levene(data1, data2)
            equal_var = p_value > 0.05
            return "equal" if equal_var else "unequal", p_value
        except:
            return "unknown", 0.0

    def choose_statistical_test(self, data1, data2):
        """
        Choose appropriate statistical test based on assumptions
        
        Returns:
            test_name, statistic, p_value, equal_variances, p_levene
        """
        # Check normality
        normal_1, p_norm_1 = self.perform_normality_test(data1)
        normal_2, p_norm_2 = self.perform_normality_test(data2)
        
        if normal_1 and normal_2:
            # Both normal - check equal variances
            equal_var_result, p_levene = self.perform_equal_variance_test(data1, data2)
            
            if equal_var_result == "equal":
                # Use Student's t-test
                statistic, p_value = stats.ttest_ind(data1, data2, equal_var=True)
                test_name = "Student's t-test"
            else:
                # Use Welch's t-test
                statistic, p_value = stats.ttest_ind(data1, data2, equal_var=False)
                test_name = "Welch's t-test"
        else:
            # Non-normal - use Mann-Whitney U test
            statistic, p_value = stats.mannwhitneyu(data1, data2, alternative='two-sided')
            test_name = "Mann-Whitney U test"
            equal_var_result, p_levene = "N/A (non-parametric)", np.nan

        return test_name, statistic, p_value, equal_var_result, p_levene, normal_1, normal_2, p_norm_1, p_norm_2

    def calculate_cohens_d(self, data1, data2):
        """Calculate Cohen's d effect size"""
        try:
            pooled_std = np.sqrt(((len(data1) - 1) * np.var(data1, ddof=0) +
                                (len(data2) - 1) * np.var(data2, ddof=0)) /
                               (len(data1) + len(data2) - 2))
            
            if pooled_std == 0:
                return 0.0
                
            cohens_d = (np.mean(data1) - np.mean(data2)) / pooled_std
            return cohens_d
        except:
            return 0.0

    def interpret_effect_size(self, cohens_d):
        """Interpret Cohen's d effect size"""
        abs_d = abs(cohens_d)
        if abs_d < 0.2:
            return "negligible"
        elif abs_d < 0.5:
            return "small"
        elif abs_d < 0.8:
            return "medium"
        else:
            return "large"

    def bonferroni_correction(self, p_values, alpha=0.05):
        """Apply Bonferroni correction"""
        p_values = np.array(p_values)
        n_tests = len(p_values)
        p_corrected = p_values * n_tests
        p_corrected = np.clip(p_corrected, 0, 1)
        rejected = p_corrected < alpha
        return rejected, p_corrected

    def extract_metric_data_from_pkl(self, agent_result, metric_type, env_name):
        """Extract metric-specific data from pkl results"""
        seed_values = []
        
        for seed_key, seed_result in agent_result['individual_seeds'].items():
            if seed_result.get('success_rate', 0) > 0:
                if metric_type == 'overall_performance':
                    # Use mean_reward from seed result
                    seed_values.append(seed_result.get('mean_reward', 0))
                    
                elif metric_type == 'recovery_rate':
                    # Calculate recovery rate for this seed using rewards
                    rewards = seed_result.get('rewards', np.array([]))
                    if rewards.size > 0:
                        recovery_rates = self.compute_recovery_rate_for_seed(rewards, env_name)
                        if len(recovery_rates) > 0:
                            seed_values.append(np.mean(recovery_rates))
                        
                elif metric_type == 'recovery_time':
                    # Calculate recovery time for this seed using rewards
                    rewards = seed_result.get('rewards', np.array([]))
                    if rewards.size > 0:
                        recovery_times = self.compute_recovery_time_for_seed(rewards, env_name)
                        if len(recovery_times) > 0:
                            seed_values.append(np.mean(recovery_times))
                            
        return seed_values

    def compute_recovery_rate_for_seed(self, rewards, env_name):
        """Compute recovery rate for a seed's rewards"""
        # Simplified recovery rate calculation
        if env_name == "EnvA":
            change_points = [100]
            optimal_rewards = [0.8, 0.9]
        elif env_name == "EnvB":
            change_points = [40, 80, 120, 160]
            optimal_rewards = [0.95, 0.95, 0.95, 0.95, 0.95]
        elif env_name == "EnvC":
            change_points = [50, 100, 150]  # Default fallback
            optimal_rewards = [0.8, 0.85, 0.8, 0.85]
        else:
            return []
            
        recovery_rates = []
        analysis_window = 30
        
        for run_idx in range(rewards.shape[0]):
            run_rewards = rewards[run_idx]
            run_recovery_rates = []
            
            for change_idx, change_point in enumerate(change_points):
                if change_point >= len(run_rewards) - analysis_window:
                    continue
                    
                post_start = change_point
                post_end = min(change_point + analysis_window, len(run_rewards))
                
                if post_end <= post_start:
                    continue
                    
                segment_optimal = optimal_rewards[min(change_idx, len(optimal_rewards) - 1)]
                post_change_performance = np.mean(run_rewards[post_start:post_end])
                recovery_rate = post_change_performance / segment_optimal
                
                run_recovery_rates.append(recovery_rate)
                
            if run_recovery_rates:
                recovery_rates.append(np.mean(run_recovery_rates))
                
        return recovery_rates

    def compute_recovery_time_for_seed(self, rewards, env_name):
        """Compute recovery time for a seed's rewards"""
        # Simplified recovery time calculation
        if env_name == "EnvA":
            change_points = [100]
            optimal_rewards = [0.8, 0.9]
            threshold_ratio = 0.85
        elif env_name == "EnvB":
            change_points = [40, 80, 120, 160]
            optimal_rewards = [0.95, 0.95, 0.95, 0.95, 0.95]
            threshold_ratio = 0.90
        elif env_name == "EnvC":
            change_points = [50, 100, 150]
            optimal_rewards = [0.8, 0.85, 0.8, 0.85]
            threshold_ratio = 0.85
        else:
            return []
            
        recovery_times = []
        analysis_window = 50
        stability_window = 5
        
        for run_idx in range(rewards.shape[0]):
            run_rewards = rewards[run_idx]
            run_recovery_times = []
            
            for change_idx, change_point in enumerate(change_points):
                if change_point >= len(run_rewards) - 10:
                    continue
                    
                segment_optimal = optimal_rewards[min(change_idx, len(optimal_rewards) - 1)]
                threshold = segment_optimal * threshold_ratio
                
                post_change_start = change_point
                post_change_end = min(change_point + analysis_window, len(run_rewards))
                post_change_rewards = run_rewards[post_change_start:post_change_end]
                
                recovery_time = len(post_change_rewards)
                
                for i in range(3, len(post_change_rewards) - stability_window + 1):
                    window = post_change_rewards[i:i + stability_window]
                    if np.mean(window) >= threshold:
                        recovery_time = i + stability_window // 2
                        break
                        
                run_recovery_times.append(recovery_time)
                
            if run_recovery_times:
                recovery_times.append(np.mean(run_recovery_times))
                
        return recovery_times

    def create_comprehensive_bonferroni_table(self, save_path="output"):
        """
        Create comprehensive Bonferroni correction table matching the example format
        """
        print(" Creating comprehensive Bonferroni correction table...")
        
        all_comparisons = []
        
        # Process EnvA-C results
        for env_name, env_results in self.complete_results.items():
            print(f"  Processing {env_name}...")
            
            # Define metrics to test
            metrics = [
                ('Overall Performance', 'overall_performance'),
                ('Recovery Rate', 'recovery_rate'), 
                ('Recovery Time', 'recovery_time')
            ]
            
            for metric_display_name, metric_type in metrics:
                # Extract agent data for this metric
                agent_data = {}
                
                for agent_name, agent_result in env_results.items():
                    if agent_result['meta_statistics']['n_master_seeds'] > 0:
                        seed_data = self.extract_metric_data_from_pkl(agent_result, metric_type, env_name)
                        if len(seed_data) >= 3:  # Minimum for statistical testing
                            agent_data[agent_name] = seed_data

                # Perform pairwise comparisons
                agent_names = list(agent_data.keys())
                for i in range(len(agent_names)):
                    for j in range(i+1, len(agent_names)):
                        agent1, agent2 = agent_names[i], agent_names[j]
                        data1, data2 = agent_data[agent1], agent_data[agent2]

                        if len(data1) >= 3 and len(data2) >= 3:
                            # Perform comprehensive statistical testing
                            test_name, statistic, p_value, equal_var_result, p_levene, normal_1, normal_2, p_norm_1, p_norm_2 = self.choose_statistical_test(data1, data2)
                            
                            # Calculate effect size
                            cohens_d = self.calculate_cohens_d(data1, data2)
                            effect_size_interp = self.interpret_effect_size(cohens_d)

                            comparison = {
                                'Environment': env_name,
                                'Metric': metric_display_name,
                                'Agent_1': agent1,
                                'Agent_2': agent2,
                                'Mean_1': np.mean(data1),
                                'Mean_2': np.mean(data2),
                                'Std_1': np.std(data1, ddof=0),
                                'Std_2': np.std(data2, ddof=0),
                                'N_Seeds_1': len(data1),
                                'N_Seeds_2': len(data2),
                                'Mean_Difference': np.mean(data1) - np.mean(data2),
                                'Test_Used': test_name,
                                'Statistic': statistic,
                                'P_Value_Raw': p_value,
                                'Cohens_D': cohens_d,
                                'Effect_Size': effect_size_interp,
                                'Normal_1': normal_1,
                                'Normal_2': normal_2,
                                'P_Normality_1': p_norm_1,
                                'P_Normality_2': p_norm_2,
                                'Equal_Variances': equal_var_result,
                                'P_Levene': p_levene if not np.isnan(p_levene) else "N/A",
                                'Significant_Raw': p_value < 0.05
                            }
                            
                            all_comparisons.append(comparison)

        # Process cross-dataset results if available
        if self.cross_dataset_results:
            print("  Processing Cross-Dataset...")
            
            metrics = [
                ('Overall Performance', 'overall_performance'),
                ('Recovery Rate', 'recovery_rate'),
                ('Recovery Time', 'recovery_time')
            ]
            
            for metric_display_name, metric_type in metrics:
                agent_data = {}
                
                for agent_name, agent_result in self.cross_dataset_results.items():
                    seed_data = self.extract_cross_dataset_seed_data(agent_result, metric_type)
                    if len(seed_data) >= 3:
                        agent_data[agent_name] = seed_data

                # Perform pairwise comparisons
                agent_names = list(agent_data.keys())
                for i in range(len(agent_names)):
                    for j in range(i+1, len(agent_names)):
                        agent1, agent2 = agent_names[i], agent_names[j]
                        data1, data2 = agent_data[agent1], agent_data[agent2]

                        if len(data1) >= 3 and len(data2) >= 3:
                            test_name, statistic, p_value, equal_var_result, p_levene, normal_1, normal_2, p_norm_1, p_norm_2 = self.choose_statistical_test(data1, data2)
                            
                            cohens_d = self.calculate_cohens_d(data1, data2)
                            effect_size_interp = self.interpret_effect_size(cohens_d)

                            comparison = {
                                'Environment': 'Cross-Dataset',
                                'Metric': metric_display_name,
                                'Agent_1': agent1,
                                'Agent_2': agent2,
                                'Mean_1': np.mean(data1),
                                'Mean_2': np.mean(data2),
                                'Std_1': np.std(data1, ddof=0),
                                'Std_2': np.std(data2, ddof=0),
                                'N_Seeds_1': len(data1),
                                'N_Seeds_2': len(data2),
                                'Mean_Difference': np.mean(data1) - np.mean(data2),
                                'Test_Used': test_name,
                                'Statistic': statistic,
                                'P_Value_Raw': p_value,
                                'Cohens_D': cohens_d,
                                'Effect_Size': effect_size_interp,
                                'Normal_1': normal_1,
                                'Normal_2': normal_2,
                                'P_Normality_1': p_norm_1,
                                'P_Normality_2': p_norm_2,
                                'Equal_Variances': equal_var_result,
                                'P_Levene': p_levene if not np.isnan(p_levene) else "N/A",
                                'Significant_Raw': p_value < 0.05
                            }
                            
                            all_comparisons.append(comparison)

        if not all_comparisons:
            print(" No valid comparisons found")
            return None

        # Apply Bonferroni correction
        p_values = [comp['P_Value_Raw'] for comp in all_comparisons]
        rejected, p_corrected = self.bonferroni_correction(p_values)

        # Add corrected results
        for i, comparison in enumerate(all_comparisons):
            comparison['P_Value_Bonferroni'] = p_corrected[i]
            comparison['Significant_Bonferroni'] = rejected[i]

        # Create DataFrame
        df = pd.DataFrame(all_comparisons)
        
        # Save results
        os.makedirs(save_path, exist_ok=True)
        csv_path = f"{save_path}/significant_results_bonferroni.csv"
        df.to_csv(csv_path, index=False)
        
        print(f" Saved comprehensive Bonferroni table: {csv_path}")
        print(f"   Total comparisons: {len(df)}")
        print(f"   Significant before correction: {df['Significant_Raw'].sum()}")
        print(f"   Significant after Bonferroni: {df['Significant_Bonferroni'].sum()}")
      
        return df
    def create_environment_specific_bonferroni_tables(self, complete_df, save_path):
        """Create separate Bonferroni tables for each environment with all metrics"""
        print(" Creating environment-specific Bonferroni tables...")
        
        # Create separate tables for each environment
        for env_name in complete_df['Environment'].unique():
            env_df = complete_df[complete_df['Environment'] == env_name].copy()
            
            # Re-apply Bonferroni correction for this environment only
            env_p_values = env_df['P_Value_Raw'].values
            env_rejected, env_p_corrected = self.bonferroni_correction(env_p_values)
            
            env_df['P_Value_Bonferroni'] = env_p_corrected
            env_df['Significant_Bonferroni'] = env_rejected
            
            # Save environment-specific table
            env_csv_path = f"{save_path}/bonferroni_all_metrics_{env_name}.csv"
            env_df.to_csv(env_csv_path, index=False)
            
            print(f"   Saved {env_name}: {len(env_df)} comparisons, {env_df['Significant_Bonferroni'].sum()} significant")
    def calculate_adaptation_speed(self, agent_result, env_name):
        """Calculate adaptation speed metric (placeholder implementation)"""
        # This would need to be implemented based on your specific definition
        # For now, return a placeholder value
        return 0.5, 0.1  # mean, std

    def create_wide_format_summary(self, save_path="output"):
        """
        Create wide format summary table matching the example format
        """
        print(" Creating wide format summary table...")
        
        summary_data = []
        
        # Process EnvA-C results
        for env_name, env_results in self.complete_results.items():
            for agent_name, agent_result in env_results.items():
                if agent_result['meta_statistics']['n_master_seeds'] > 0:
                    meta_stats = agent_result['meta_statistics']
                    
                    # Calculate 95% confidence intervals
                    overall_ci_lower = meta_stats.get('ci_lower', meta_stats['meta_mean'])
                    overall_ci_upper = meta_stats.get('ci_upper', meta_stats['meta_mean'])
                    overall_ci_str = f"[{overall_ci_lower:.4f}, {overall_ci_upper:.4f}]"
                    
                    recovery_rate_ci_lower = meta_stats.get('recovery_rate_ci_lower', meta_stats.get('meta_recovery_rate_mean', 0))
                    recovery_rate_ci_upper = meta_stats.get('recovery_rate_ci_upper', meta_stats.get('meta_recovery_rate_mean', 0))
                    recovery_rate_ci_str = f"[{recovery_rate_ci_lower:.4f}, {recovery_rate_ci_upper:.4f}]"
                    
                    recovery_time_ci_lower = meta_stats.get('recovery_time_ci_lower', meta_stats.get('meta_recovery_time_mean', 0))
                    recovery_time_ci_upper = meta_stats.get('recovery_time_ci_upper', meta_stats.get('meta_recovery_time_mean', 0))
                    recovery_time_ci_str = f"[{recovery_time_ci_lower:.2f}, {recovery_time_ci_upper:.2f}]"
                    
                    # Calculate adaptation speed (placeholder)
                    adapt_speed_mean, adapt_speed_std = self.calculate_adaptation_speed(agent_result, env_name)
                    adapt_speed_ci_str = f"[{adapt_speed_mean-1.96*adapt_speed_std:.4f}, {adapt_speed_mean+1.96*adapt_speed_std:.4f}]"
                    
                    row = {
                        'Agent': agent_name,
                        'Environment': env_name,
                        'Agent_Environment': f"{agent_name}_{env_name}",
                        
                        # Overall Performance
                        'Overall Performance_Mean': meta_stats['meta_mean'],
                        'Overall Performance_95%CI': overall_ci_str,
                        'Overall Performance_STD': meta_stats['meta_std'],
                        
                        # Recovery Rate
                        'Recovery Rate_Mean': meta_stats.get('meta_recovery_rate_mean', 0),
                        'Recovery Rate_95%CI': recovery_rate_ci_str,
                        'Recovery Rate_STD': meta_stats.get('meta_recovery_rate_std', 0),
                        
                        # Recovery Time
                        'Recovery Time_Mean': meta_stats.get('meta_recovery_time_mean', 0),
                        'Recovery Time_95%CI': recovery_time_ci_str,
                        'Recovery Time_STD': meta_stats.get('meta_recovery_time_std', 0),
                        
                        # Adaptation Speed
                        'Adaptation Speed_Mean': adapt_speed_mean,
                        'Adaptation Speed_95%CI': adapt_speed_ci_str,
                        'Adaptation Speed_STD': adapt_speed_std
                    }
                    
                    summary_data.append(row)

        # Process cross-dataset results if available
        if self.cross_dataset_results:
            for agent_name, agent_result in self.cross_dataset_results.items():
                meta_stats = agent_result['meta_statistics']
                
                # Calculate 95% confidence intervals for cross-dataset
                overall_mean = meta_stats.get('overall_performance_mean', 0)
                overall_std = meta_stats.get('overall_performance_std', 0)
                overall_ci_str = f"[{overall_mean-1.96*overall_std:.4f}, {overall_mean+1.96*overall_std:.4f}]"
                
                recovery_rate_mean = meta_stats.get('recovery_rate_mean', 0)
                recovery_rate_std = meta_stats.get('recovery_rate_std', 0)
                recovery_rate_ci_str = f"[{recovery_rate_mean-1.96*recovery_rate_std:.4f}, {recovery_rate_mean+1.96*recovery_rate_std:.4f}]"
                
                recovery_time_mean = meta_stats.get('recovery_time_mean', 0)
                recovery_time_std = meta_stats.get('recovery_time_std', 0)
                recovery_time_ci_str = f"[{recovery_time_mean-1.96*recovery_time_std:.2f}, {recovery_time_mean+1.96*recovery_time_std:.2f}]"
                
                # Adaptation speed for cross-dataset
                adapt_speed_mean, adapt_speed_std = 0.6, 0.12  # Placeholder
                adapt_speed_ci_str = f"[{adapt_speed_mean-1.96*adapt_speed_std:.4f}, {adapt_speed_mean+1.96*adapt_speed_std:.4f}]"
                
                row = {
                    'Agent': agent_name,
                    'Environment': 'Cross-Dataset',
                    'Agent_Environment': f"{agent_name}_Cross-Dataset",
                    
                    # Overall Performance
                    'Overall Performance_Mean': overall_mean,
                    'Overall Performance_95%CI': overall_ci_str,
                    'Overall Performance_STD': overall_std,
                    
                    # Recovery Rate
                    'Recovery Rate_Mean': recovery_rate_mean,
                    'Recovery Rate_95%CI': recovery_rate_ci_str,
                    'Recovery Rate_STD': recovery_rate_std,
                    
                    # Recovery Time
                    'Recovery Time_Mean': recovery_time_mean,
                    'Recovery Time_95%CI': recovery_time_ci_str,
                    'Recovery Time_STD': recovery_time_std,
                    
                    # Adaptation Speed
                    'Adaptation Speed_Mean': adapt_speed_mean,
                    'Adaptation Speed_95%CI': adapt_speed_ci_str,
                    'Adaptation Speed_STD': adapt_speed_std
                }
                
                summary_data.append(row)

        # Create DataFrame
        df = pd.DataFrame(summary_data)
        
        # Save results
        os.makedirs(save_path, exist_ok=True)
        csv_path = f"{save_path}/fibonacci_environments_wide_format.csv"
        df.to_csv(csv_path, index=False)
        
        print(f" Saved wide format summary: {csv_path}")
        print(f"   Total Agent-Environment combinations: {len(df)}")
        
        return df

    def extract_emotion_trajectories(self, save_path="output"):
        """Extract emotion trajectory plots from .npy files"""
        if not self.emotion_data_path:
            print(" Emotion data path not provided")
            return

        import matplotlib.pyplot as plt
        
        emotion_names = [
            "Fear", "Joy", "Hope", "Sadness",
            "Curiosity", "Anger", "Pride", "Shame"
        ]

        print(" Creating emotion trajectory plots...")
        os.makedirs(save_path, exist_ok=True)

        for env_name in self.environments:
            emotion_file = f"{self.emotion_data_path}/emotion_data_{env_name}.npy"
            
            if not os.path.exists(emotion_file):
                print(f" Emotion file not found: {emotion_file}")
                continue

            print(f"  Creating emotion trajectory plot for {env_name}...")

            # Load emotion data
            emotion_data = np.load(emotion_file)  # Shape: [n_runs, n_trials, 8]

            # Calculate average emotion trajectories across runs
            avg_emotions = np.mean(emotion_data, axis=0)  # Shape: [n_trials, 8]
            std_emotions = np.std(emotion_data, axis=0)   # Shape: [n_trials, 8]

            n_trials = avg_emotions.shape[0]
            trials = np.arange(n_trials)

            # Create 4x2 subplot (4 rows, 2 columns)
            fig, axes = plt.subplots(4, 2, figsize=(12, 16))
            axes = axes.flatten()

            colors = ['#d62728', '#ff7f0e', '#2ca02c', '#1f77b4',
                      '#9467bd', '#8c564b', '#e377c2', '#7f7f7f']

            for i in range(8):
                ax = axes[i]
                emotion_name = emotion_names[i]

                # Plot mean trajectory
                ax.plot(trials, avg_emotions[:, i], color=colors[i], linewidth=2,
                        label=f'Mean {emotion_name}')

                # Plot confidence interval (mean ± std)
                ax.fill_between(trials,
                               avg_emotions[:, i] - std_emotions[:, i],
                               avg_emotions[:, i] + std_emotions[:, i],
                               color=colors[i], alpha=0.3)

                ax.set_title(f'{emotion_name}', fontweight='bold', fontsize=12)
                ax.set_xlabel('Trial')
                ax.set_ylabel('Emotion Intensity')
                ax.grid(True, alpha=0.3)
                ax.set_ylim(0, 1)

                # Add some stats
                mean_intensity = np.mean(avg_emotions[:, i])
                ax.text(0.02, 0.98, f'Avg: {mean_intensity:.3f}',
                        transform=ax.transAxes, fontsize=9,
                        bbox=dict(boxstyle="round,pad=0.3", facecolor="white", alpha=0.8),
                        verticalalignment='top')

            plt.suptitle(f'ECIA_Full Emotion Trajectories - {env_name}\n'
                         f'Average across {emotion_data.shape[0]} runs',
                         fontsize=14, fontweight='bold')
            plt.tight_layout()

            # Save plot
            plot_path = f"{save_path}/emotion_trajectories_{env_name}.png"
            plt.savefig(plot_path, dpi=300, bbox_inches='tight')
            plt.close()

            print(f"   Saved emotion plot: {plot_path}")

        # Create comparison plot for all environments
        self.create_emotion_comparison_plot(save_path)

    def create_emotion_comparison_plot(self, save_path):
        """Create comparison plot showing all environments together"""
        if not self.emotion_data_path:
            return

        import matplotlib.pyplot as plt
        
        emotion_names = [
            "Fear", "Joy", "Hope", "Sadness",
            "Curiosity", "Anger", "Pride", "Shame"
        ]

        print("  Creating emotion comparison plot...")

        # Load all data
        all_env_data = {}
        for env_name in self.environments:
            emotion_file = f"{self.emotion_data_path}/emotion_data_{env_name}.npy"
            if os.path.exists(emotion_file):
                emotion_data = np.load(emotion_file)
                avg_emotions = np.mean(emotion_data, axis=0)  # Average across runs
                all_env_data[env_name] = avg_emotions

        if not all_env_data:
            print("   No emotion data found for comparison plot")
            return

        # Create comparison plot - 4x2 layout
        fig, axes = plt.subplots(4, 2, figsize=(12, 16))
        axes = axes.flatten()

        colors = {'EnvA': '#1f77b4', 'EnvB': '#ff7f0e', 'EnvC': '#2ca02c'}

        for i in range(8):
            ax = axes[i]
            emotion_name = emotion_names[i]

            for env_name, avg_emotions in all_env_data.items():
                trials = np.arange(len(avg_emotions))
                ax.plot(trials, avg_emotions[:, i],
                       color=colors[env_name], linewidth=2,
                       label=env_name, alpha=0.8)

            ax.set_title(f'{emotion_name}', fontweight='bold', fontsize=12)
            ax.set_xlabel('Trial')
            ax.set_ylabel('Emotion Intensity')
            ax.grid(True, alpha=0.3)
            ax.set_ylim(0, 1)

            if i == 0:  # Add legend to first subplot
                ax.legend(loc='upper right')

        plt.suptitle('ECIA_Full Emotion Trajectories - Environment Comparison',
                     fontsize=16, fontweight='bold')
        plt.tight_layout()

        # Save comparison plot
        comparison_path = f"{save_path}/emotion_comparison_all_environments.png"
        plt.savefig(comparison_path, dpi=300, bbox_inches='tight')
        plt.close()

        print(f"   Saved emotion comparison plot: {comparison_path}")

    def run_complete_analysis(self, save_path="output"):
        """Run complete statistical analysis with ALL metrics"""
        print(" Starting comprehensive statistical analysis with ALL metrics...")
        print("=" * 60)
        print("  Processing:")
        print("   • Wide format summary tables")
        print("   • Comprehensive Bonferroni (ALL metrics)")
        print("   • Environment-specific Bonferroni tables")
        print("   • Emotion trajectories (if available)")
        print("=" * 60)
        
        # Create statistical tables
        bonferroni_df = self.create_comprehensive_bonferroni_table(save_path)
        wide_format_df = self.create_wide_format_summary(save_path)
        
        # Create emotion trajectories if emotion data available
        if self.emotion_data_path:
            self.extract_emotion_trajectories(save_path)
        
        print("=" * 60)
        print(" Complete statistical analysis finished!")
        print(f" Files saved to: {save_path}")
        print("\n Generated files:")
        print("   • comprehensive_bonferroni_all_metrics.csv - All environments & metrics")
        print("   • bonferroni_all_metrics_EnvA.csv - EnvA with all metrics")
        print("   • bonferroni_all_metrics_EnvB.csv - EnvB with all metrics")
        print("   • bonferroni_all_metrics_EnvC.csv - EnvC with all metrics")
        print("   • bonferroni_all_metrics_Cross-Dataset.csv - Cross-dataset with all metrics")
        print("   • fibonacci_environments_wide_format.csv - Agent-Environment summary")
        if self.emotion_data_path:
            print("   • emotion_trajectories_EnvX.png - Emotion plots")
            print("   • emotion_comparison_all_environments.png - Environment comparison")
        
        return bonferroni_df, wide_format_df


# Main execution function
def run_advanced_statistical_analysis(results_pkl_path, cross_dataset_pkl_path=None, emotion_data_path=None, output_path="statistical_output"):
    """
    Main function to run advanced statistical analysis
    
    Args:
        results_pkl_path: Path to complete_results_full.pkl
        cross_dataset_pkl_path: Path to cross_dataset results (optional)
        emotion_data_path: Path to directory containing emotion .npy files (optional)
        output_path: Output directory
    """
    
    print(" ADVANCED STATISTICAL ANALYSIS TOOL")
    print("=" * 50)
    print(" Input files:")
    print(f"   • EnvA-C results: {results_pkl_path}")
    if cross_dataset_pkl_path:
        print(f"   • Cross-dataset results: {cross_dataset_pkl_path}")
    if emotion_data_path:
        print(f"   • Emotion data: {emotion_data_path}")
    print(f" Output directory: {output_path}")
    print("=" * 50)
    
    # Initialize analyzer
    analyzer = AdvancedStatisticalAnalyzer(
        results_pkl_path=results_pkl_path,
        cross_dataset_pkl_path=cross_dataset_pkl_path,
        emotion_data_path=emotion_data_path
    )
    
    # Run complete analysis
    bonferroni_df, wide_format_df = analyzer.run_complete_analysis(output_path)
    
    return analyzer, bonferroni_df, wide_format_df


# Example usage
if __name__ == "__main__":
    # Set your file paths here
    RESULTS_PKL = "content/Results/complete_results_full.pkl"
    CROSS_DATASET_PKL = "content/Results/complete_cross_dataset_results_unified.pkl"
    EMOTION_DATA_DIR = "content/Results"  # Directory containing .npy files
    OUTPUT_DIR = "statistical_analysis_output"
    
    # Run analysis
    analyzer, bonferroni_df, wide_format_df = run_advanced_statistical_analysis(
        results_pkl_path=RESULTS_PKL,
        cross_dataset_pkl_path=CROSS_DATASET_PKL,
        emotion_data_path=EMOTION_DATA_DIR,
        output_path=OUTPUT_DIR
    )
    
    print("\n COMPREHENSIVE STATISTICAL ANALYSIS COMPLETED!")

